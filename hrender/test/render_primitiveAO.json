{"nodeData":[{"name":"CreatePointModel","funcname":"CreatePointModel","info":"Pointデータを表示させるためのノード","pos":[298,148],"varname":"instPointModel2","customfuncfile":"createPointModel.lua","input":[{"name":"point","type":"BufferPointData"},{"name":"translate","type":"vec3","value":["80","0",0]},{"name":"rotate","type":"vec3","value":[0,0,0]},{"name":"scale","type":"vec3","value":[1,1,1]},{"name":"shadername","type":"string","value":"gi.frag"},{"name":"Uniform","type":"Uniform","array":[{"name":"Uniform0","type":"Uniform"},{"name":"Uniform1","type":"Uniform"},{"name":"Uniform2","type":"Uniform"}]}],"output":[{"name":"model","type":"RenderObject"}],"customfunc":"function CreatePointModel(property)\n\tlocal pm = PointModel();\n\tpm:Create(property.point);\n\tpm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])\n\tpm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])\n\tpm:SetScale(property.scale[1], property.scale[2], property.scale[3])\n\tpm:SetShader(property.shadername)\n\tlocal uniforms = property.Uniform\n\tfor i,v in pairs(uniforms) do\n\t\tif v.type == 'vec4' then\n\t\t\tprint('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')\n\t\t\tpm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])\n\t\tend\n\t\tif v.type == 'vec3' then\n\t\t\tprint('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')\n\t\t\tpm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])\n\t\tend\n\t\tif v.type == 'vec2' then\n\t\t\tprint('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')\n\t\t\tpm:SetVec2(v.name, v.value[1], v.value[2])\n\t\tend\n\t\tif v.type == 'float' then\n\t\t\tprint('float[' .. v.name .. '] = (', v.value, ')')\n\t\t\tpm:SetFloat(v.name, v.value)\n\t\tend\n\tend\n\tfunction getModel()\n\t\treturn pm\n\tend\n\treturn {\n\t\tmodel=getModel\n\t}\nend\n"},{"name":"Render","funcname":"Render","info":"レンダリングを行うためのノード","pos":[717,142],"varname":"root3","customfuncfile":"render.lua","rootnode":true,"input":[{"name":"RenderObject","type":"RenderObject","array":[{"name":"RenderObject0","type":"RenderObject"},{"name":"RenderObject1","type":"RenderObject"},{"name":"RenderObject2","type":"RenderObject"},{"name":"RenderObject3","type":"RenderObject"},{"name":"RenderObject4","type":"RenderObject"}]}],"output":[],"customfunc":"function Render(arg)\n\trender(arg.RenderObject)\nend"},{"name":"CreateCamera","funcname":"CreateCamera","info":"カメラをつくるためのノード","pos":[43,33],"varname":"instCreateCamera4","customfuncfile":"createcamera.lua","input":[{"name":"position","type":"vec3","value":[0,0,-300]},{"name":"target","type":"vec3","value":[0,0,0]},{"name":"up","type":"vec3","value":[0,1,0]},{"name":"fov","type":"float","value":60},{"name":"screensize","type":"vec2","value":[512,512]},{"name":"filename","type":"string","value":"output.jpg"}],"output":[{"name":"camera","type":"RenderObject"}],"customfunc":"function CreateCamera(property)\n\tlocal cam;\t\n\tprint('create camera',\n\t\tproperty.screensize[1], property.screensize[2],\n\t\tproperty.filename)\n\tcam = Camera()\n\tcam:SetScreenSize(property.screensize[1], property.screensize[2])\n\tcam:SetFilename(property.filename)\n\tcam:LookAt(\n\t\tproperty.position[1], property.position[2], property.position[3],\n\t\tproperty.target[1], property.target[2], property.target[3],\n\t\tproperty.up[1], property.up[2], property.up[3],\n\t\tproperty.fov\n\t)\n\t\n\tfunction camera()\n\t\treturn cam\n\tend\n\treturn {\n\t\tcamera = camera\n\t}\nend\n"},{"name":"SphereGenerator","funcname":"SphereGenerator","info":"Sphereを生成するためのノード","pos":[24.25,273.25],"varname":"instSphereGen1","customfuncfile":"generator.lua","input":[{"name":"size","type":"float","value":"30"}],"output":[{"name":"PointData","type":"BufferPointData"}],"customfunc":"function SphereGenerator(property)\n\tlocal size = property.size\n\treturn {\n\t\tPointData = function ()\n\t\t\tlocal gen  = PrimitiveGenerator()\n\t\t\treturn gen:Sphere(size)\n\t\tend\n\t}\nend\n"},{"name":"QuadGenerator","funcname":"QuadGenerator","info":"Quadを生成するためのノード","pos":[24,673],"varname":"instQuadGen2","customfuncfile":"generator.lua","input":[{"name":"size","type":"vec2","value":["200","200"]}],"output":[{"name":"MeshData","type":"BufferMeshData"}],"customfunc":"function QuadGenerator(property)\n\tlocal size = {property.size[1], property.size[2]}\n\n\treturn {\n\t\tMeshData = function ()\n\t\t\tlocal gen  = PrimitiveGenerator()\n\t\t\treturn gen:Quad(size[1], size[2])\n\t\tend\n\t}\nend\n"},{"name":"CreatePolygonModel","funcname":"CreatePolygonModel","info":"メッシュデータを表示させるためのノード","pos":[306,805],"varname":"instPolygonModel3","customfuncfile":"createPolygonModel.lua","input":[{"name":"mesh","type":"BufferMeshData"},{"name":"translate","type":"vec3","value":[0,"-30","0"]},{"name":"rotate","type":"vec3","value":["-90",0,0]},{"name":"scale","type":"vec3","value":["1","1","1"]},{"name":"shadername","type":"string","value":"gi.frag"},{"name":"Uniform","type":"Uniform","array":[{"name":"Uniform0","type":"Uniform"},{"name":"Uniform1","type":"Uniform"},{"name":"Uniform2","type":"Uniform"}]}],"output":[{"name":"model","type":"RenderObject"}],"customfunc":"function CreatePolygonModel(property)\n\tlocal pm = PolygonModel();\n\tpm:Create(property.mesh);\n\tpm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])\n\tpm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])\n\tpm:SetScale(property.scale[1], property.scale[2], property.scale[3])\n\tpm:SetShader(property.shadername)\n\n\tlocal uniforms = property.Uniform\n\tfor i,v in pairs(uniforms) do\n\t\tif v.type == 'vec4' then\n\t\t\tprint('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')\n\t\t\tpm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])\n\t\tend\n\t\tif v.type == 'vec3' then\n\t\t\tprint('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')\n\t\t\tpm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])\n\t\tend\n\t\tif v.type == 'vec2' then\n\t\t\tprint('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')\n\t\t\tpm:SetVec2(v.name, v.value[1], v.value[2])\n\t\tend\n\t\tif v.type == 'float' then\n\t\t\tprint('float[' .. v.name .. '] = (', v.value, ')')\n\t\t\tpm:SetFloat(v.name, v.value)\n\t\tend\n\tend\n\tfunction getModel()\n\t\treturn pm\n\tend\n\treturn {\n\t\tmodel=getModel\n\t}\nend\n"},{"name":"CreatePointModel","funcname":"CreatePointModel","info":"Pointデータを表示させるためのノード","pos":[308,365],"varname":"instPointModel6","customfuncfile":"createPointModel.lua","input":[{"name":"point","type":"BufferPointData"},{"name":"translate","type":"vec3","value":[0,0,0]},{"name":"rotate","type":"vec3","value":[0,0,0]},{"name":"scale","type":"vec3","value":[1,1,1]},{"name":"shadername","type":"string","value":"gi.frag"},{"name":"Uniform","type":"Uniform","array":[{"name":"Uniform0","type":"Uniform"},{"name":"Uniform1","type":"Uniform"},{"name":"Uniform2","type":"Uniform"}]}],"output":[{"name":"model","type":"RenderObject"}],"customfunc":"function CreatePointModel(property)\n\tlocal pm = PointModel();\n\tpm:Create(property.point);\n\tpm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])\n\tpm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])\n\tpm:SetScale(property.scale[1], property.scale[2], property.scale[3])\n\tpm:SetShader(property.shadername)\n\tlocal uniforms = property.Uniform\n\tfor i,v in pairs(uniforms) do\n\t\tif v.type == 'vec4' then\n\t\t\tprint('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')\n\t\t\tpm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])\n\t\tend\n\t\tif v.type == 'vec3' then\n\t\t\tprint('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')\n\t\t\tpm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])\n\t\tend\n\t\tif v.type == 'vec2' then\n\t\t\tprint('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')\n\t\t\tpm:SetVec2(v.name, v.value[1], v.value[2])\n\t\tend\n\t\tif v.type == 'float' then\n\t\t\tprint('float[' .. v.name .. '] = (', v.value, ')')\n\t\t\tpm:SetFloat(v.name, v.value)\n\t\tend\n\tend\n\tfunction getModel()\n\t\treturn pm\n\tend\n\treturn {\n\t\tmodel=getModel\n\t}\nend\n"},{"name":"CreatePointModel","funcname":"CreatePointModel","info":"Pointデータを表示させるためのノード","pos":[305,576],"varname":"instPointModel7","customfuncfile":"createPointModel.lua","input":[{"name":"point","type":"BufferPointData"},{"name":"translate","type":"vec3","value":["-80",0,0]},{"name":"rotate","type":"vec3","value":[0,0,0]},{"name":"scale","type":"vec3","value":[1,1,1]},{"name":"shadername","type":"string","value":"gi.frag"},{"name":"Uniform","type":"Uniform","array":[{"name":"Uniform0","type":"Uniform"},{"name":"Uniform1","type":"Uniform"},{"name":"Uniform2","type":"Uniform"}]}],"output":[{"name":"model","type":"RenderObject"}],"customfunc":"function CreatePointModel(property)\n\tlocal pm = PointModel();\n\tpm:Create(property.point);\n\tpm:SetTranslate(property.translate[1], property.translate[2], property.translate[3])\n\tpm:SetRotate(property.rotate[1], property.rotate[2], property.rotate[3])\n\tpm:SetScale(property.scale[1], property.scale[2], property.scale[3])\n\tpm:SetShader(property.shadername)\n\tlocal uniforms = property.Uniform\n\tfor i,v in pairs(uniforms) do\n\t\tif v.type == 'vec4' then\n\t\t\tprint('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')\n\t\t\tpm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])\n\t\tend\n\t\tif v.type == 'vec3' then\n\t\t\tprint('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')\n\t\t\tpm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])\n\t\tend\n\t\tif v.type == 'vec2' then\n\t\t\tprint('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')\n\t\t\tpm:SetVec2(v.name, v.value[1], v.value[2])\n\t\tend\n\t\tif v.type == 'float' then\n\t\t\tprint('float[' .. v.name .. '] = (', v.value, ')')\n\t\t\tpm:SetFloat(v.name, v.value)\n\t\tend\n\tend\n\tfunction getModel()\n\t\treturn pm\n\tend\n\treturn {\n\t\tmodel=getModel\n\t}\nend\n"}],"plugData":[{"output":{"node":"instCreateCamera4","plug":"camera"},"input":{"node":"root3","plug":"RenderObject0"}},{"output":{"node":"instPointModel2","plug":"model"},"input":{"node":"root3","plug":"RenderObject1"}},{"output":{"node":"instSphereGen1","plug":"PointData"},"input":{"node":"instPointModel2","plug":"point"}},{"output":{"node":"instQuadGen2","plug":"MeshData"},"input":{"node":"instPolygonModel3","plug":"mesh"}},{"output":{"node":"instPolygonModel3","plug":"model"},"input":{"node":"root3","plug":"RenderObject2"}},{"output":{"node":"instSphereGen1","plug":"PointData"},"input":{"node":"instPointModel6","plug":"point"}},{"output":{"node":"instPointModel6","plug":"model"},"input":{"node":"root3","plug":"RenderObject3"}},{"output":{"node":"instSphereGen1","plug":"PointData"},"input":{"node":"instPointModel7","plug":"point"}},{"output":{"node":"instPointModel7","plug":"model"},"input":{"node":"root3","plug":"RenderObject4"}}]}