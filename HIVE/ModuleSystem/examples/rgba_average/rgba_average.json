{
  "name": "",
  "varname": "Root",
  "type": "scene",
  "nodes": [
    {
      "name": "Group",
      "varname": "group_de3853c1_d871_49fe_893a_0b78460dc4b4",
      "type": "group",
      "nodes": [
        {
          "name": "LoadSPH",
          "funcname": "LoadSPH",
          "info": "SPHをロードするためのノード",
          "customfuncfile": "loadsph.lua",
          "input": [
            {
              "name": "filepath",
              "type": "string",
              "value": "",
              "meta": "filebrowser",
              "nodeVarname": "LoadSPHccac2bf8_a3ce_4b16_ad30_f2ebefa26e24"
            }
          ],
          "output": [
            {
              "name": "VolumeData",
              "type": "BufferVolumeData",
              "nodeVarname": "LoadSPHccac2bf8_a3ce_4b16_ad30_f2ebefa26e24"
            },
            {
              "name": "Size",
              "type": "vec3",
              "nodeVarname": "LoadSPHccac2bf8_a3ce_4b16_ad30_f2ebefa26e24"
            },
            {
              "name": "Component",
              "type": "float",
              "nodeVarname": "LoadSPHccac2bf8_a3ce_4b16_ad30_f2ebefa26e24"
            }
          ],
          "customfunc": "\nLoadSPH = {}\nsetmetatable(LoadSPH, {__index = HiveBaseModule})\n\nLoadSPH.new = function (varname)\n    local this = HiveBaseModule.new(varname);\n    this.loader = require('SphLoader')()\n    setmetatable(this, {__index=LoadSPH})\n    return this\nend\n\nfunction LoadSPH:Do()\n    self:UpdateValue()\n    return self.loader:Load(self.value.filepath)\nend\n\nfunction LoadSPH:VolumeData()\n    return self.loader:VolumeData()\nend\n\nfunction LoadSPH:Size()\n    local size = {self.loader:Width(), self.loader:Height(), self.loader:Depth()}\n    return size\nend\n\nfunction LoadSPH:Component()\n    return self.loader:Component()\nend\n",
          "uiFunc": "",
          "varname": "LoadSPHccac2bf8_a3ce_4b16_ad30_f2ebefa26e24",
          "label": "",
          "select": false,
          "node": {
            "close": false,
            "pos": [
              2153,
              2075
            ],
            "zindex": 0
          },
          "panel": {
            "size": [
              100,
              100
            ],
            "pos": [
              100,
              100
            ],
            "zindex": 1
          }
        },
        {
          "name": "StringFormat",
          "funcname": "StringFormat",
          "info": "Format情報に基づいてStringをつくるノード",
          "customfuncfile": "format.lua",
          "input": [
            {
              "name": "format",
              "type": "string",
              "value": "prss88/prs_%010d.sph",
              "nodeVarname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927"
            },
            {
              "name": "input",
              "type": "float",
              "array": [
                {
                  "name": "input[0]",
                  "type": "float",
                  "nodeVarname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927"
                }
              ],
              "nodeVarname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927"
            }
          ],
          "output": [
            {
              "name": "String",
              "type": "string",
              "nodeVarname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927"
            }
          ],
          "customfunc": "StringFormat = {}\nsetmetatable(StringFormat, {__index = HiveBaseModule})\n\nStringFormat.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    this.property = {\n        outstr = \"\"\n    }\n    setmetatable(this, {__index=StringFormat})\n    return this\nend\n\nfunction StringFormat:Do()\n    self:UpdateValue()\n    local v = self.value\n    --print (v.input)\n    --print (v.format)\n\tlocal fmt = v.format\n\tlocal inputlist = {}\n\tlocal cnt = 1\n\tfunction unpack (t, i)\n\t\ti = i or 1\n\t\tif t[i] ~= nil then\n\t\t\treturn t[i], unpack(t, i + 1)\n\t\tend\n\tend\n    if v.input then\n        for i,v in pairs(v.input) do -- TODO: Order\n            inputlist[cnt] = v\n            cnt = cnt + 1\n        end\n    end\n\n\tlocal outstr = ''\n\tif #inputlist > 0 then\n\t\tself.outstr = string.format(fmt, unpack(inputlist))\n\tend\n    \n    return true\nend\n\nfunction StringFormat:String()\n    --print(self.outstr)\n    return self.outstr\nend\n",
          "uiFunc": "",
          "varname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927",
          "label": "",
          "select": true,
          "node": {
            "close": false,
            "pos": [
              1830.7692307692307,
              2075.769230769231
            ],
            "zindex": 0
          },
          "panel": {
            "size": [
              100,
              100
            ],
            "pos": [
              150,
              150
            ],
            "zindex": 2
          }
        },
        {
          "name": "VolumeObject",
          "funcname": "VolumeObject",
          "info": "ボリュームデータを表示させるためのノード",
          "customfuncfile": "VolumeObject.lua",
          "input": [
            {
              "name": "volume",
              "type": "BufferVolumeData",
              "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
            },
            {
              "name": "translate",
              "type": "vec3",
              "value": [
                0,
                0,
                0
              ],
              "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
            },
            {
              "name": "rotate",
              "type": "vec3",
              "value": [
                0,
                0,
                0
              ],
              "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
            },
            {
              "name": "scale",
              "type": "vec3",
              "value": [
                1,
                1,
                1
              ],
              "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
            },
            {
              "name": "shadername",
              "type": "string",
              "value": "../shader/volume.frag",
              "meta": "shaderlist",
              "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
            },
            {
              "name": "Uniform",
              "type": "Uniform",
              "array": [
                {
                  "name": "Uniform[0]",
                  "type": "Uniform",
                  "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
                },
                {
                  "name": "Uniform[1]",
                  "type": "Uniform",
                  "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
                },
                {
                  "name": "Uniform[2]",
                  "type": "Uniform",
                  "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
                }
              ],
              "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
            }
          ],
          "output": [
            {
              "name": "model",
              "type": "RenderObject",
              "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
            }
          ],
          "customfunc": "VolumeObject = {}\nsetmetatable(VolumeObject, {__index = HiveBaseModule})\n\nVolumeObject.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    local pm = PolygonModel();\n    this.pmodel = pm\n    \n    setmetatable(this, {__index=VolumeObject})\n    return this\nend\n\nfunction VolumeObject:Do()    \n    self:UpdateValue()\n    local v = self.value    \n    local pm = VolumeModel(); -- make new Model!\n    self.pmodel = pm           -- replace\n    \n    local minval = 0.0\n    local maxval = 1.0\n    if v.volume then\n        if v.volume:Width() > 0 and v.volume:Height() > 0 and v.volume:Depth() > 0 then \n            pm:Create(v.volume)\n            -- Analyze min/max\n            local analyzer = require('Analyzer').VolumeAnalyzer()\n            analyzer:Execute(v.volume)\n            minval = analyzer:MinX()\n            maxval = analyzer:MaxX()\n            print('analyzer: min=', minval, ' max=', maxval)\n       end\n    end    \n    \n    pm:SetFloat('volumemin', minval)\n    pm:SetFloat('volumemax', maxval)\n    \n\tpm:SetTranslate(v.translate[1], v.translate[2], v.translate[3])\n\tpm:SetRotate(v.rotate[1], v.rotate[2], v.rotate[3])\n\tpm:SetScale(v.scale[1], v.scale[2], v.scale[3])\n\tpm:SetShader(v.shadername)\n\n\tlocal uniforms = self.connection.Uniform\n    if uniforms ~= nil then    \n        for i,v in pairs(uniforms) do\n            if v.type == 'vec4' then\n                print('vec4[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], v.value[4], ')')\n                pm:SetVec4(v.name, v.value[1], v.value[2], v.value[3], v.value[4])\n            end\n            if v.type == 'vec3' then\n                print('vec3[' .. v.name .. '] = (', v.value[1], v.value[2], v.value[3], ')')\n                pm:SetVec3(v.name, v.value[1], v.value[2], v.value[3])\n            end\n            if v.type == 'vec2' then\n                print('vec2[' .. v.name .. '] = (', v.value[1], v.value[2], ')')\n                pm:SetVec2(v.name, v.value[1], v.value[2])\n            end\n            if v.type == 'float' then\n                print('float[' .. v.name .. '] = (', v.value, ')')\n                pm:SetFloat(v.name, v.value)\n            end\n            if v.type == 'texture' then\n                print('texture[' .. v.name .. '] = (', v.value, ')')\n                pm:SetTexture(v.name, v.value)\n            end\n        end\n    end\n    return true\nend\n\nfunction VolumeObject:model()\n    return self.pmodel;\nend\n",
          "uiFunc": "",
          "varname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad",
          "label": "",
          "select": false,
          "node": {
            "close": false,
            "pos": [
              2473.6923076923076,
              2076.4615384615386
            ],
            "zindex": 0
          },
          "panel": {
            "size": [
              100,
              100
            ],
            "pos": [
              250,
              250
            ],
            "zindex": 2
          }
        }
      ],
      "plugs": [
        {
          "output": {
            "nodeVarname": "LoadSPHccac2bf8_a3ce_4b16_ad30_f2ebefa26e24",
            "name": "VolumeData"
          },
          "input": {
            "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad",
            "name": "volume"
          }
        },
        {
          "output": {
            "nodeVarname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927",
            "name": "String"
          },
          "input": {
            "nodeVarname": "LoadSPHccac2bf8_a3ce_4b16_ad30_f2ebefa26e24",
            "name": "filepath"
          }
        }
      ],
      "input": [
        {
          "name": "input[0]",
          "type": "float",
          "nodeVarname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927",
          "value": "a"
        }
      ],
      "output": [
        {
          "name": "model",
          "type": "RenderObject",
          "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad"
        }
      ],
      "label": "SphVolume",
      "select": false,
      "node": {
        "close": false,
        "pos": [
          1932.4022988505747,
          2061.0459770114944
        ],
        "zindex": 0
      },
      "panel": {
        "size": [
          100,
          100
        ],
        "pos": [
          550,
          550
        ],
        "zindex": -2
      }
    },
    {
      "name": "ImageGet",
      "funcname": "ImageGet",
      "info": "ImageSetによってメモリに格納されたImageを取得するノード",
      "customfuncfile": "imageget.lua",
      "input": [
        {
          "name": "id",
          "type": "string",
          "value": "",
          "nodeVarname": "ImageGet02af5dd7_04bb_4bc3_916a_03136c04b221"
        }
      ],
      "output": [
        {
          "name": "image",
          "type": "BufferImageData",
          "nodeVarname": "ImageGet02af5dd7_04bb_4bc3_916a_03136c04b221"
        }
      ],
      "customfunc": "ImageGet = {}\nsetmetatable(ImageGet, {__index = HiveBaseModule})\n\nImageGet.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    setmetatable(this, {__index=ImageGet})\n    this.buffer_data = nil\n    return this\nend\n\nfunction ImageGet:Do()\n    self:UpdateValue()\n    local v = self.value\n    local id = v.id\n    local buffer = getBufferData(id);\n    if buffer ~= nil then\n        self.buffer_data = buffer;\n    end\n    return true\nend\n\nfunction ImageGet:image()\n    return self.buffer_data\nend\n",
      "uiFunc": "",
      "varname": "ImageGet02af5dd7_04bb_4bc3_916a_03136c04b221",
      "label": "",
      "select": false,
      "node": {
        "close": false,
        "pos": [
          2211,
          2337.222222222222
        ],
        "zindex": 0
      },
      "panel": {
        "size": [
          100,
          100
        ],
        "pos": [
          750,
          750
        ],
        "zindex": -2
      }
    },
    {
      "name": "Group",
      "varname": "group_03fb1d5d_c348_4b19_8693_ac2e7527b0c8",
      "type": "group",
      "nodes": [
        {
          "name": "Math",
          "funcname": "Math",
          "info": "算術演算ノード",
          "customfuncfile": "math.lua",
          "uifile": "math.jsx",
          "input": [
            {
              "name": "value0",
              "type": "float",
              "value": 0,
              "nodeVarname": "Math9779fa29_e816_48a1_8196_007116dad6d2"
            },
            {
              "name": "value1",
              "type": "float",
              "value": 1,
              "nodeVarname": "Math9779fa29_e816_48a1_8196_007116dad6d2"
            },
            {
              "name": "operation",
              "type": "string",
              "value": "value0 - value1",
              "nodeVarname": "Math9779fa29_e816_48a1_8196_007116dad6d2"
            }
          ],
          "output": [
            {
              "name": "result",
              "type": "float",
              "nodeVarname": "Math9779fa29_e816_48a1_8196_007116dad6d2"
            }
          ],
          "customfunc": "Math = {}\nsetmetatable(Math, {__index = HiveBaseModule})\n\nMath.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    setmetatable(this, {__index=Math});\n    this.res = 0;\n    return this\nend\n\nfunction Math:Do()\n    self:UpdateValue()\n    local v = self.value;\n    local value0 = v.value0;\n    local value1 = v.value1;\n    local ope = v.operation;\n    self.res = loadstring( string.format([[\n        local value0 = %d;\n        local value1 = %d;\n        return (]] .. ope .. [[);]], value0, value1) )();\n    return true\nend\n\nfunction Math:result()\n    return self.res;\nend\n",
          "uiFunc": "\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar Math = (function (_React$Component) {\n\t_inherits(Math, _React$Component);\n\n\tfunction Math(props) {\n\t\t_classCallCheck(this, Math);\n\n\t\t_get(Object.getPrototypeOf(Math.prototype), \"constructor\", this).call(this, props);\n\n\t\tthis.store = props.store;\n\t\tthis.action = props.action;\n\t\tthis.node = props.node;\n\n\t\tthis.filterNameToValue = {\n\t\t\t\"Add\": \"value0 + value1\",\n\t\t\t\"Subtract\": \"value0 - value1\",\n\t\t\t\"Multiply\": \"value0 * value1\",\n\t\t\t\"Divide\": \"value0 / value1\",\n\t\t\t\"Custom\": \"\"\n\t\t};\n\t\tthis.getOperationName = this.getOperationName.bind(this);\n\t\tthis.nodeInputChanged = this.nodeInputChanged.bind(this);\n\t\tthis.componentDidUpdate = this.componentDidUpdate.bind(this);\n\t\tthis.state = {\n\t\t\tvalue: this.getOperationName(this.props.node.input[2].value)\n\t\t};\n\n\t\tthis.componentDidMount = this.componentDidMount.bind(this);\n\t\tthis.componentWillUnmount = this.componentWillUnmount.bind(this);\n\t}\n\n\t_createClass(Math, [{\n\t\tkey: \"componentDidUpdate\",\n\t\tvalue: function componentDidUpdate() {}\n\t}, {\n\t\tkey: \"nodeInputChanged\",\n\t\tvalue: function nodeInputChanged(err, data) {\n\t\t\tvar varname = this.node.varname;\n\t\t\tif (varname !== data.varname) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tvalue: this.getOperationName(data.input[2].value)\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"componentDidMount\",\n\t\tvalue: function componentDidMount() {\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.on(NODE_INPUT_CHANGED, this.nodeInputChanged);\n\t\t}\n\t}, {\n\t\tkey: \"componentWillUnmount\",\n\t\tvalue: function componentWillUnmount() {\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.off(NODE_INPUT_CHANGED, this.nodeInputChanged);\n\t\t}\n\t}, {\n\t\tkey: \"onChange\",\n\t\tvalue: function onChange(e) {\n\t\t\tvar option = e.target.options[e.target.selectedIndex];\n\t\t\tif (this.filterNameToValue.hasOwnProperty(option.value)) {\n\t\t\t\tvar value = this.filterNameToValue[option.value];\n\t\t\t\tthis.props.action.changeNodeInput({\n\t\t\t\t\tvarname: this.props.node.varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"operation\": value\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"options\",\n\t\tvalue: function options() {\n\t\t\tvar options = Object.keys(this.filterNameToValue).map(function (name, index) {\n\t\t\t\treturn _react2[\"default\"].createElement(\n\t\t\t\t\t\"option\",\n\t\t\t\t\t{ key: name + \"_\" + String(index) },\n\t\t\t\t\tname\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn options;\n\t\t}\n\t}, {\n\t\tkey: \"getOperationName\",\n\t\tvalue: function getOperationName(value) {\n\t\t\tfor (var i in this.filterNameToValue) {\n\t\t\t\tif (this.filterNameToValue[i] === value) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"Custom\";\n\t\t}\n\t}, {\n\t\tkey: \"render\",\n\t\tvalue: function render() {\n\t\t\treturn _react2[\"default\"].createElement(\n\t\t\t\t\"div\",\n\t\t\t\t{ className: 'math', style: { margin: '4', minWidth: \"130px\", minHeight: \"30px\", height: '100%', padding: '2' } },\n\t\t\t\t_react2[\"default\"].createElement(\n\t\t\t\t\t\"select\",\n\t\t\t\t\t{ value: this.state.value, style: { width: \"120px\", height: \"25px\" }, onChange: this.onChange.bind(this) },\n\t\t\t\t\tthis.options.bind(this)()\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}]);\n\n\treturn Math;\n})(_react2[\"default\"].Component);\n\nmodule.exports = Math;",
          "varname": "Math9779fa29_e816_48a1_8196_007116dad6d2",
          "label": "",
          "select": false,
          "node": {
            "close": false,
            "pos": [
              1814.4093264248704,
              2371.357512953368
            ],
            "zindex": 0
          },
          "panel": {
            "visible": true,
            "size": [
              100,
              100
            ],
            "pos": [
              -50,
              54
            ],
            "zindex": 6
          }
        },
        {
          "name": "StringFormat",
          "funcname": "StringFormat",
          "info": "Format情報に基づいてStringをつくるノード",
          "customfuncfile": "format.lua",
          "input": [
            {
              "name": "format",
              "type": "string",
              "value": "%d",
              "nodeVarname": "StringFormat2836b9a7_2f14_48a8_a03c_df55d1e047a7"
            },
            {
              "name": "input",
              "type": "float",
              "array": [
                {
                  "name": "input[0]",
                  "type": "float",
                  "nodeVarname": "StringFormat2836b9a7_2f14_48a8_a03c_df55d1e047a7"
                }
              ],
              "nodeVarname": "StringFormat2836b9a7_2f14_48a8_a03c_df55d1e047a7"
            }
          ],
          "output": [
            {
              "name": "String",
              "type": "string",
              "nodeVarname": "StringFormat2836b9a7_2f14_48a8_a03c_df55d1e047a7",
              "label": "String"
            }
          ],
          "customfunc": "StringFormat = {}\nsetmetatable(StringFormat, {__index = HiveBaseModule})\n\nStringFormat.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    this.property = {\n        outstr = \"\"\n    }\n    setmetatable(this, {__index=StringFormat})\n    return this\nend\n\nfunction StringFormat:Do()\n    self:UpdateValue()\n    local v = self.value\n    --print (v.input)\n    --print (v.format)\n\tlocal fmt = v.format\n\tlocal inputlist = {}\n\tlocal cnt = 1\n\tfunction unpack (t, i)\n\t\ti = i or 1\n\t\tif t[i] ~= nil then\n\t\t\treturn t[i], unpack(t, i + 1)\n\t\tend\n\tend\n    if v.input then\n        for i,v in pairs(v.input) do -- TODO: Order\n            inputlist[cnt] = v\n            cnt = cnt + 1\n        end\n    end\n\n\tlocal outstr = ''\n\tif #inputlist > 0 then\n\t\tself.outstr = string.format(fmt, unpack(inputlist))\n\tend\n    \n    return true\nend\n\nfunction StringFormat:String()\n    --print(self.outstr)\n    return self.outstr\nend\n",
          "uiFunc": "",
          "varname": "StringFormat2836b9a7_2f14_48a8_a03c_df55d1e047a7",
          "label": "",
          "select": true,
          "node": {
            "close": false,
            "pos": [
              2173.7974683544303,
              2353.8101265822784
            ],
            "zindex": 0
          },
          "panel": {
            "size": [
              100,
              100
            ],
            "pos": [
              150,
              150
            ],
            "zindex": 2
          }
        }
      ],
      "plugs": [
        {
          "output": {
            "nodeVarname": "Math9779fa29_e816_48a1_8196_007116dad6d2",
            "name": "result"
          },
          "input": {
            "nodeVarname": "StringFormat2836b9a7_2f14_48a8_a03c_df55d1e047a7",
            "name": "input[0]"
          }
        }
      ],
      "input": [
        {
          "name": "value0",
          "type": "float",
          "value": 0,
          "nodeVarname": "Math9779fa29_e816_48a1_8196_007116dad6d2"
        }
      ],
      "output": [
        {
          "name": "String",
          "type": "string",
          "nodeVarname": "StringFormat2836b9a7_2f14_48a8_a03c_df55d1e047a7",
          "label": "String"
        }
      ],
      "label": "Time(t-1)",
      "select": false,
      "node": {
        "close": false,
        "pos": [
          1911.6835443037974,
          2289
        ],
        "zindex": 0
      },
      "panel": {
        "size": [
          100,
          100
        ],
        "pos": [
          300,
          300
        ],
        "zindex": -1
      }
    },
    {
      "name": "Time",
      "funcname": "Time",
      "info": "Timeをつくるノード",
      "customfuncfile": "time.lua",
      "uifile": "time.jsx",
      "input": [
        {
          "name": "value",
          "type": "float",
          "value": 0,
          "visible": false,
          "hole": false,
          "nodeVarname": "Timebb39a741_6787_4bd0_80b2_b19b4f7c40f8"
        }
      ],
      "output": [
        {
          "name": "time",
          "type": "float",
          "nodeVarname": "Timebb39a741_6787_4bd0_80b2_b19b4f7c40f8"
        },
        {
          "name": "timestring",
          "type": "string",
          "nodeVarname": "Timebb39a741_6787_4bd0_80b2_b19b4f7c40f8"
        }
      ],
      "customfunc": "Time = {}\nsetmetatable(Time, {__index = HiveBaseModule})\n\nTime.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    this.property = {\n        value = {1,1,1,1}\n    }\n    setmetatable(this, {__index=Time})\n    return this\nend\n\nfunction Time:Do()\n    self:UpdateValue()\n    -- nothing to do\n    return true\nend\n\nfunction Time:time()\n    local v = self.value\n    local value = v.value\n    return value\nend\n\nfunction Time:timestring()\n    local v = self.value\n    local value = v.value\n    return tostring(value)\nend\n\n",
      "uiFunc": "\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar Time = (function (_React$Component) {\n\t_inherits(Time, _React$Component);\n\n\tfunction Time(props) {\n\t\tvar _this = this;\n\n\t\t_classCallCheck(this, Time);\n\n\t\t_get(Object.getPrototypeOf(Time.prototype), \"constructor\", this).call(this, props);\n\t\tthis.frameChanged = this.frameChanged.bind(this);\n\n\t\tthis.action = props.action;\n\t\tthis.store = props.store;\n\n\t\tsetTimeout(function () {\n\t\t\t_this.action.changePanelVisible(props.node.varname, false);\n\t\t}, 0);\n\t}\n\n\t_createClass(Time, [{\n\t\tkey: \"frameChanged\",\n\t\tvalue: function frameChanged(err, frame) {\n\t\t\t// 特殊対応\n\t\t\tthis.props.store.actionExecuter.changeNodeInput({\n\t\t\t\tinputInfo: {\n\t\t\t\t\tvarname: this.props.node.varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"value\": frame\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"componentDidMount\",\n\t\tvalue: function componentDidMount() {\n\t\t\tthis.store.on(\"change_frame\", this.frameChanged);\n\t\t}\n\t}, {\n\t\tkey: \"componentWillUnmount\",\n\t\tvalue: function componentWillUnmount() {\n\t\t\tthis.store.off(\"change_frame\", this.frameChanged);\n\t\t}\n\t}, {\n\t\tkey: \"render\",\n\t\tvalue: function render() {\n\t\t\treturn _react2[\"default\"].createElement(\"div\", null);\n\t\t}\n\t}]);\n\n\treturn Time;\n})(_react2[\"default\"].Component);\n\nmodule.exports = Time;",
      "varname": "Timebb39a741_6787_4bd0_80b2_b19b4f7c40f8",
      "label": "",
      "select": false,
      "node": {
        "close": false,
        "pos": [
          1624.7577639751553,
          2160.2422360248447
        ],
        "zindex": 0
      },
      "panel": {
        "visible": false,
        "size": [
          100,
          100
        ],
        "pos": [
          100,
          100
        ],
        "zindex": -1
      }
    },
    {
      "name": "RenderView",
      "funcname": "RenderView",
      "info": "レンダリングを行うためのノード",
      "customfuncfile": "renderview.lua",
      "uifile": "renderview.jsx",
      "input": [
        {
          "name": "position",
          "type": "vec3",
          "value": [
            0,
            0,
            300
          ],
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "target",
          "type": "vec3",
          "value": [
            0,
            0,
            0
          ],
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "up",
          "type": "vec3",
          "value": [
            0,
            1,
            0
          ],
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "fov",
          "type": "float",
          "value": 60,
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "presets",
          "type": "CameraPreset",
          "value": null,
          "visible": false,
          "hole": false,
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "screensize",
          "type": "vec2",
          "value": [
            256,
            256
          ],
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "rendersize",
          "type": "vec2",
          "value": [
            256,
            256
          ],
          "visible": false,
          "hole": false,
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "clearcolor",
          "type": "vec4",
          "value": [
            0,
            0,
            0,
            1
          ],
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "ipcmode",
          "type": "bool",
          "value": false,
          "hole": false,
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "Camera",
          "type": "RenderObject",
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "RenderObject",
          "type": "RenderObject",
          "array": [
            {
              "name": "RenderObject[0]",
              "type": "RenderObject",
              "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
            },
            {
              "name": "RenderObject[1]",
              "type": "RenderObject",
              "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
            },
            {
              "name": "RenderObject[2]",
              "type": "RenderObject",
              "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
            }
          ],
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        }
      ],
      "output": [
        {
          "name": "Camera",
          "type": "RenderObject",
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        },
        {
          "name": "Image",
          "type": "BufferImageData",
          "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997"
        }
      ],
      "customfunc": "\nRenderView = {}\nsetmetatable(RenderView, {__index = HiveBaseModule})\n\nRenderView.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    this.cam = Camera()    \n    this.property = {\n        screensize = {512, 512},\n        position = {0,0,300},\n        target = {0,0,0},\n        up = {0,1,0},\n        fov = 60,\n        clearcolor = {0,0,0,1},\n        color_file = \"\",\n        depth_file = \"\",\n        ipcmode = false\n    }\n    this.network_ipc = nil\n    \n    setmetatable(this, {__index=RenderView})\n    return this\nend\n\nfunction RenderView:Do()\n    self:UpdateValue()\n    local v = self.value\n    \n    self.cam:SetScreenSize(v.rendersize[1], v.rendersize[2])--v.screensize[1], v.screensize[2])\n    self.cam:SetFilename(v.color_file)\n    self.cam:SetDepthFilename(v.depth_file)\n    self.cam:ClearColor(v.clearcolor[1],v.clearcolor[2],v.clearcolor[3],v.clearcolor[4])\n    self.cam:LookAt(\n        v.position[1], v.position[2], v.position[3],\n        v.target[1],   v.target[2],   v.target[3],\n        v.up[1],       v.up[2],       v.up[3],\n        v.fov\n    )\n    \n    local temp = {}\n    local targetcam\n-- For Object\n    if v.RenderObject then\n        temp = v.RenderObject\n    end\n        \n-- For Camera\n    if v.Camera then\n        temp[#temp + 1] = v.Camera\n        targetcam = v.Camera\n    else\n        temp[#temp + 1] = self.cam\n        targetcam = self.cam\n    end\n\n-- dump\n--[[\n    for i,v in pairs(temp) do\n         print('RenderObject->', v);   \n    end\n--]]\n--[[\n    if v.screensize[1] / 10 < v.rendersize[1] then\n        render(temp, HIVE_fetchEvent)\n    else\n    ]]\n        render(temp)\n    --end\n    \n    if network == nil and HIVE_metabin == nil then -- no UI mode        \n        return true\n    end \n    \n    local mode = 'png'\n    -- image save\n    local imageBuffer\n    local imageBufferSize\n    if self.property.ipcmode then\n        mode = 'raw'\n        -- image save\n        local img = targetcam:GetImageBuffer()\t\n        imageBuffer = img:GetBuffer()\n        imageBufferSize = img:GetSize()\n    else    \n        -- image save\n        imageBuffer = HIVE_ImageSaver:SaveMemory(5, targetcam:GetImageBuffer())\n        imageBufferSize = HIVE_ImageSaver:MemorySize()\n    end\n    \n    -- create metabinary\n    --local w = v.screensize[1]\n    --local h = v.screensize[2]\n    local w = v.rendersize[1]\n    local h = v.rendersize[2]\n    print('rendersize=('.. w ..\",\".. h ..\")\", 'cancel=', tostring(HIVE_isRenderCanceled))\n    \n    if targetClientId == nil then\n        return false\n    end\n    local json = [[{\n            \"JSONRPC\" : \"2.0\",\n            \"method\" : \"renderedImage\",            \n            \"to\" : ]] .. targetClientId ..[[,\n            \"param\" : {\n                \"type\" : \"]] .. mode .. [[\",\n                \"width\" : \"]] .. w .. [[\",\n                \"height\" : \"]] .. h .. [[\",\n                \"canceled\": ]] .. tostring(HIVE_isRenderCanceled) .. [[,\n                \"varname\": \"]] .. self.varname .. [[\"\n            },\n            \"id\":0\n    }]]\n    HIVE_metabin:Create(json, imageBuffer, imageBufferSize)\n    --print('JSON=', json, 'size=', imageBufferSize)\n    -- send\n    print('ipcmode', self.property.ipcmode)        \n    if self.property.ipcmode then       \n        if self.network_ipc == nil then\n            local ipcAddress = 'ipc:///tmp/HIVE_IPC_' .. self.varname\n            print('IPC open=', ipcAddress);\n\t        self.network_ipc = require(\"Network\").Connection()\n\t        local ipcr = self.network_ipc:Connect(ipcAddress)\n\t        print('IPC ret=', ipcr)\n        end\n        print('IPC->', self.network_ipc)\n        self.network_ipc:SendBinary(HIVE_metabin:BinaryBuffer(), HIVE_metabin:BinaryBufferSize())\n        print('IPC SEND!!!!!!!!!!!')\t\t\t   \n\n    else\n        network:SendBinary(HIVE_metabin:BinaryBuffer(), HIVE_metabin:BinaryBufferSize())\n        print('WEBSOCKET SEND!!!!!!!!!!!')\t\t\t   \n\n    end\n    return true\nend\n\n\nfunction RenderView:Camera()\n    return self.cam\nend\n\nfunction RenderView:Image()\n    return self.cam:GetImageBuffer()\nend",
      "uiFunc": "'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\n//import nanomsg from 'nanomsg'\n//import buffercopy from 'buffercopy'\n\nvar minWidth = 256;\nvar minHeight = 100;\nvar footerHeight = 50;\n\nfunction progressiveMin(val) {\n\treturn parseInt(val / 16.0, 10);\n}\n\nvar RenderView = (function (_React$Component) {\n\t_inherits(RenderView, _React$Component);\n\n\tfunction RenderView(props) {\n\t\t_classCallCheck(this, RenderView);\n\n\t\t_get(Object.getPrototypeOf(RenderView.prototype), 'constructor', this).call(this, props);\n\t\tconsole.log('RenderView Constructor:', props);\n\n\t\tthis.node = props.node;\n\t\tthis.action = props.action;\n\t\tthis.store = props.store;\n\n\t\tthis.varname = this.node.varname;\n\n\t\tthis.state = {\n\t\t\twidth: minWidth,\n\t\t\theight: minHeight\n\t\t};\n\n\t\t// Mouse\n\t\tthis.mouseState = 0;\n\t\tthis.oldmx = 0;\n\t\tthis.oldmy = 0;\n\n\t\t// View\n\t\tthis.componentDidUpdate = this.componentDidUpdate.bind(this);\n\t\tthis.imageRecieved = this.imageRecieved.bind(this);\n\t\tthis.imageRecieveWrap = this.imageRecieveWrap.bind(this);\n\t\tthis.onPanelSizeChanged = this.onPanelSizeChanged.bind(this);\n\t\tthis.getInputValue = this.getInputValue.bind(this);\n\t\tthis.onEnterCameraButton = this.onEnterCameraButton.bind(this);\n\t\tthis.onLeaveCameraButton = this.onLeaveCameraButton.bind(this);\n\t\tthis.onClickCameraButton = this.onClickCameraButton.bind(this);\n\t\tthis.onClickCameraRegisterButton = this.onClickCameraRegisterButton.bind(this);\n\t\tthis.reRender = this.reRender.bind(this);\n\n\t\tthis.updatePreset = this.updatePreset.bind(this);\n\n\t\tthis.reRender(true);\n\t}\n\n\t_createClass(RenderView, [{\n\t\tkey: 'progressiveUpdate',\n\t\tvalue: function progressiveUpdate(param) {\n\t\t\tvar _this = this;\n\n\t\t\tvar w = param.width;\n\t\t\tvar h = param.height;\n\t\t\tvar varname = this.node.varname;\n\t\t\tvar ssize = this.getInputValue(\"screensize\");\n\t\t\tif (this.mouseState > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (w < ssize[0] || h < ssize[1]) {\n\t\t\t\tw = ssize[0];\n\t\t\t\th = ssize[1];\n\t\t\t\t//console.log('PROGRESSIVE:', w, h);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t_this.action.changeNodeInput({\n\t\t\t\t\t\tvarname: varname,\n\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\"rendersize\": [w, h]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'imageRecieved',\n\t\tvalue: function imageRecieved(err, param, data) {\n\t\t\tvar buffer;\n\t\t\tvar varname = this.node.varname;\n\t\t\tif (param.varname !== varname) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (param.type === 'jpg') {\n\t\t\t\tbuffer = new Blob([data]);\n\t\t\t} else if (param.type == 'png') {\n\t\t\t\tbuffer = new Blob([data]);\n\t\t\t} else {\n\t\t\t\tbuffer = data;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\timage: buffer\n\t\t\t});\n\n\t\t\t// progressive update\n\t\t\tthis.progressiveUpdate(param);\n\t\t}\n\t}, {\n\t\tkey: 'hasIPCAddress',\n\t\tvalue: function hasIPCAddress() {\n\t\t\treturn this.getInputValue('ipcmode');\n\t\t}\n\t}, {\n\t\tkey: 'closeForIPCImageTransfer',\n\t\tvalue: function closeForIPCImageTransfer() {\n\t\t\tif (this.sc === undefined) {} else {\n\t\t\t\tthis.sc.close();\n\t\t\t\tthis.sc = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'readyForIPCImageTransfer',\n\t\tvalue: function readyForIPCImageTransfer() {\n\t\t\tvar _this2 = this;\n\n\t\t\t// Electron only\n\t\t\tif (this.sc === undefined && window && window.process && window.process.type) {\n\t\t\t\tvar nano = process.mainModule.require('nanomsg');\n\t\t\t\tvar buffercopy = process.mainModule.require('buffercopy');\n\t\t\t\tvar sc = nano.socket('pair');\n\t\t\t\tthis.sc = sc;\n\t\t\t\tvar meta = process.mainModule.require(process.mainModule.require(\"path\").resolve('./lib/metabinary')); // path from index.html\n\t\t\t\tthis.meta = meta;\n\t\t\t\tvar ipcAddress = 'ipc:///tmp/HIVE_IPC_' + this.varname;\n\t\t\t\tvar ret = sc.bind(ipcAddress);\n\t\t\t\tconsole.log('IPC bind = ', ret, ipcAddress);\n\n\t\t\t\tthis.sc.on('data', function (data) {\n\t\t\t\t\t//console.log('ONDATAA!!!!', this.meta);\n\t\t\t\t\tif (meta === undefined) {\n\t\t\t\t\t\t// ????? Why undefined???\n\t\t\t\t\t\tmeta = meta;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!_this2.meta.loadMetaBinary(data, function (meta, data) {\n\t\t\t\t\t\tvar w,\n\t\t\t\t\t\t    h,\n\t\t\t\t\t\t    param = meta.param;\n\t\t\t\t\t\tif (param.type === 'jpg') {\n\t\t\t\t\t\t\t// resultElement is img.\n\t\t\t\t\t\t\tvar resultElement = document.getElementById(_this2.getCanvasName('img'));\n\t\t\t\t\t\t\tresultElement.src = URL.createObjectURL(new Blob([data], { type: \"image/jpeg\" }));\n\t\t\t\t\t\t} else if (param.type === 'png') {\n\t\t\t\t\t\t\t// resultElement is img.\n\t\t\t\t\t\t\tvar resultElement = document.getElementById(_this2.getCanvasName('img'));\n\t\t\t\t\t\t\tresultElement.src = URL.createObjectURL(new Blob([data], { type: \"image/png\" }));\n\t\t\t\t\t\t} else if (param.type === 'raw') {\n\t\t\t\t\t\t\t//console.log('UPDATE CANVAS!!!');\n\n\t\t\t\t\t\t\t// resultElement is canvas.\n\t\t\t\t\t\t\tvar resultElement = document.getElementById(_this2.getCanvasName('canvas'));\n\t\t\t\t\t\t\tif (resultElement) {\n\t\t\t\t\t\t\t\t// why undefined, sometime??\n\t\t\t\t\t\t\t\tresultElement.setAttribute('width', param.width), resultElement.setAttribute('height', param.height);\n\t\t\t\t\t\t\t\tvar context = resultElement.getContext('2d');\n\t\t\t\t\t\t\t\tvar imageData = context.createImageData(param.width, param.height);\n\t\t\t\t\t\t\t\tbuffercopy.buffercopy(data, imageData.data);\n\t\t\t\t\t\t\t\tcontext.putImageData(imageData, 0, 0);\n\n\t\t\t\t\t\t\t\t_this2.progressiveUpdate(param);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})) {\n\t\t\t\t\t\tconsole.error('Not metabin foramt');\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentDidUpdate',\n\t\tvalue: function componentDidUpdate() {\n\t\t\t// キャンバスの更新.\n\t\t\tif (this.state && this.state.image) {\n\t\t\t\tif (this.hasIPCAddress()) {\n\t\t\t\t\t/*    let canvas = document.getElementById(this.getCanvasName());\n     //let canvas = ReactDOM.findDOMNode(this.refs.canvas);\n     let context = canvas.getContext('2d');\n     let width = this.state.param.width;\n     let height = this.state.param.height;\n     canvas.setAttribute('width', width);\n     canvas.setAttribute('height', height);\n         //console.error('[inst]', nanomsg, buffercopy);\n     if (width * height * 4 == this.state.image.length) {\n     let imageData = context.createImageData(width, height);\n     buffercopy.buffercopy(this.state.image, imageData.data);\n     context.putImageData(imageData, 0, 0);\n     } else {\n     console.error(\"image size err:\", width, height);\n     }*/\n\t\t\t\t} else {\n\t\t\t\t\t\t//\t\tlet imgElem = ReactDOM.findDOMNode(this.refs.renderviewimage);\n\t\t\t\t\t\t//\t\timgElem.src = URL.createObjectURL(this.state.image, {type: \"image/jpeg\"});\n\t\t\t\t\t\tvar imgElem = document.getElementById(this.getCanvasName('img'));\n\t\t\t\t\t\timgElem.src = URL.createObjectURL(this.state.image, { type: \"image/png\" });\n\t\t\t\t\t\t//console.log(imgElem);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'reRender',\n\t\tvalue: function reRender(useProgressive) {\n\t\t\tvar _this3 = this;\n\n\t\t\tvar screensize = this.getInputValue(\"screensize\");\n\t\t\tsetTimeout(function () {\n\t\t\t\tif (useProgressive) {\n\t\t\t\t\t_this3.action.changeNodeInput({\n\t\t\t\t\t\tvarname: _this3.props.node.varname,\n\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\"rendersize\": [progressiveMin(screensize[0]), progressiveMin(screensize[1])]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t_this3.action.changeNodeInput({\n\t\t\t\t\t\tvarname: _this3.props.node.varname,\n\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\"rendersize\": [screensize[0], screensize[1]]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t}\n\t}, {\n\t\tkey: 'getInputValue',\n\t\tvalue: function getInputValue(key) {\n\t\t\tfor (var i = 0; i < this.node.input.length; i = i + 1) {\n\t\t\t\tif (this.node.input[i].name === key) {\n\t\t\t\t\treturn this.node.input[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'viewRot',\n\t\tvalue: function viewRot(rotx, roty, rotz) {\n\t\t\tvar target = JSON.parse(JSON.stringify(this.getInputValue(\"target\")));\n\t\t\tvar position = JSON.parse(JSON.stringify(this.getInputValue(\"position\")));\n\t\t\tvar eyedir = subtract(position, target);\n\t\t\tvar v = vec4(eyedir[0], eyedir[1], eyedir[2], 0.0);\n\t\t\tvar az = normalize(subtract(position, target));\n\t\t\tvar ax = normalize(cross(vec3(0, 1, 0), az));\n\t\t\tvar ay = normalize(cross(az, ax));\n\t\t\tvar rx = rotate(rotx, ax);\n\t\t\tvar ry = rotate(roty, ay);\n\t\t\tvar ssize = JSON.parse(JSON.stringify(this.getInputValue(\"screensize\")));\n\t\t\tvar rw = progressiveMin(ssize[0]);\n\t\t\tvar rh = progressiveMin(ssize[1]);\n\n\t\t\tv = vec4(dot(ry[0], v), dot(ry[1], v), dot(ry[2], v), 0.0);\n\t\t\tv = vec3(dot(rx[0], v), dot(rx[1], v), dot(rx[2], v));\n\t\t\tvar pos = add(target, v);\n\n\t\t\tif (Math.abs(dot(normalize(subtract(target, pos)), vec3(0, 1, 0))) < 0.99) {\n\t\t\t\tvar varname = this.node.varname;\n\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\tvarname: varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"position\": pos,\n\t\t\t\t\t\t\"target\": target,\n\t\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'updatePreset',\n\t\tvalue: function updatePreset() {\n\t\t\tvar layer = Number(this.refs.presetSelect.value);\n\t\t\tvar presets = this.getInputValue(\"presets\");\n\t\t\tif (!presets) {\n\t\t\t\tpresets = {};\n\t\t\t}\n\t\t\tif (!presets.hasOwnProperty(layer)) {\n\t\t\t\tpresets[layer] = {};\n\t\t\t}\n\t\t\tvar preset = presets[layer];\n\t\t\tpreset.position = JSON.parse(JSON.stringify(this.getInputValue(\"position\")));\n\t\t\tpreset.target = JSON.parse(JSON.stringify(this.getInputValue(\"target\")));\n\t\t\tpreset.up = JSON.parse(JSON.stringify(this.getInputValue(\"up\")));\n\t\t\tpreset.fov = this.getInputValue(\"fov\");\n\n\t\t\tthis.action.changeNodeInput({\n\t\t\t\tvarname: this.node.varname,\n\t\t\t\tinput: {\n\t\t\t\t\t\"presets\": presets\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'viewTrans',\n\t\tvalue: function viewTrans(tx, ty, tz) {\n\t\t\tvar target = JSON.parse(JSON.stringify(this.getInputValue(\"target\")));\n\t\t\tvar position = JSON.parse(JSON.stringify(this.getInputValue(\"position\")));\n\t\t\tvar mv = vec3(-tx, ty, 0.0);\n\t\t\tvar az = normalize(subtract(position, target));\n\t\t\tvar ax = normalize(cross(vec3(0, 1, 0), az));\n\t\t\tvar ay = normalize(cross(az, ax));\n\t\t\tvar mx = transpose(mat3(ax, ay, az));\n\t\t\tvar mm = vec3(vec3(dot(mv, mx[0]), dot(mv, mx[1]), dot(mv, mx[2])));\n\t\t\tvar pos = add(add(position, scale(-tx, ax)), scale(ty, ay));\n\t\t\tvar tar = add(add(target, scale(-tx, ax)), scale(ty, ay));\n\t\t\tvar ssize = JSON.parse(JSON.stringify(this.getInputValue(\"screensize\")));\n\t\t\tvar rw = progressiveMin(ssize[0]);\n\t\t\tvar rh = progressiveMin(ssize[1]);\n\n\t\t\tvar varname = this.node.varname;\n\t\t\tthis.action.changeNodeInput({\n\t\t\t\tvarname: varname,\n\t\t\t\tinput: {\n\t\t\t\t\t\"position\": pos,\n\t\t\t\t\t\"target\": tar,\n\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'viewZoom',\n\t\tvalue: function viewZoom(zoom) {\n\t\t\tvar target = JSON.parse(JSON.stringify(this.getInputValue(\"target\")));\n\t\t\tvar position = JSON.parse(JSON.stringify(this.getInputValue(\"position\")));\n\t\t\tvar v = subtract(position, target);\n\t\t\tvar ssize = JSON.parse(JSON.stringify(this.getInputValue(\"screensize\")));\n\t\t\tvar rw = progressiveMin(ssize[0]);\n\t\t\tvar rh = progressiveMin(ssize[1]);\n\n\t\t\tvar r = 1.0 - zoom / 1000.0;\n\t\t\tv = scale(r, v);\n\t\t\tposition = add(target, v);\n\t\t\tvar varname = this.node.varname;\n\t\t\tthis.action.changeNodeInput({\n\t\t\t\tvarname: varname,\n\t\t\t\tinput: {\n\t\t\t\t\t\"position\": position,\n\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'onImgMouseDown',\n\t\tvalue: function onImgMouseDown(event) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.mouseState = 1;\n\t\t\tthis.oldmx = event.clientX;\n\t\t\tthis.oldmy = event.clientY;\n\t\t}\n\t}, {\n\t\tkey: 'onImgMouseMove',\n\t\tvalue: function onImgMouseMove(event) {\n\t\t\tif (this.mouseState > 0) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tvar dx = event.clientX - this.oldmx;\n\t\t\t\tvar dy = event.clientY - this.oldmy;\n\t\t\t\t//console.log('mmove', dx, dy);\n\n\t\t\t\tif (event.button === 0) {\n\t\t\t\t\tthis.viewRot(-dy * 0.5, -dx * 0.5, 0.0);\n\t\t\t\t} else if (event.button === 1) {\n\t\t\t\t\tthis.viewTrans(dx, dy);\n\t\t\t\t} else if (event.button === 2) {\n\t\t\t\t\tthis.viewZoom(dx + dy);\n\t\t\t\t}\n\n\t\t\t\tthis.oldmx = event.clientX;\n\t\t\t\tthis.oldmy = event.clientY;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'onImgMouseUp',\n\t\tvalue: function onImgMouseUp(event) {\n\t\t\tif (this.mouseState !== 0) {\n\t\t\t\tthis.reRender(false);\n\t\t\t}\n\t\t\tthis.mouseState = 0;\n\t\t}\n\t}, {\n\t\tkey: 'imageRecieveWrap',\n\t\tvalue: function imageRecieveWrap(err, data) {\n\t\t\tvar _this4 = this;\n\n\t\t\tif (data.varname !== this.node.varname) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasIPCAddress()) {\n\t\t\t\tthis.readyForIPCImageTransfer();\n\t\t\t}\n\n\t\t\tvar screensize = this.getInputValue(\"screensize\");\n\t\t\tvar panelsize = data.panel.size;\n\t\t\tif (screensize[0] !== panelsize[0] || screensize[1] + footerHeight !== panelsize[1]) {\n\t\t\t\t(function () {\n\t\t\t\t\tvar panel = JSON.parse(JSON.stringify(data.panel));\n\t\t\t\t\tpanel.size[0] = Number(screensize[0]);\n\t\t\t\t\tpanel.size[1] = Number(screensize[1] + footerHeight);\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t_this4.action.changeNode({\n\t\t\t\t\t\t\tvarname: _this4.node.varname,\n\t\t\t\t\t\t\tpanel: panel\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 0);\n\t\t\t\t})();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'onPanelSizeChanged',\n\t\tvalue: function onPanelSizeChanged(err, data) {\n\t\t\tvar _this5 = this;\n\n\t\t\tif (data.varname !== this.node.varname) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.props.node.panel.visible) {\n\t\t\t\tvar width = Math.max(this.props.node.panel.size[0], minWidth);\n\t\t\t\tvar height = Math.max(this.props.node.panel.size[1] - footerHeight, minHeight);\n\t\t\t\tif (Number(this.state.width) !== width || Number(this.state.height) !== height) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\twidth: width,\n\t\t\t\t\t\theight: height\n\t\t\t\t\t});\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tvar width = Math.max(_this5.props.node.panel.size[0], minWidth);\n\t\t\t\t\t\tvar height = Math.max(_this5.props.node.panel.size[1] - footerHeight, minHeight);\n\n\t\t\t\t\t\t_this5.action.changeNodeInput({\n\t\t\t\t\t\t\tvarname: _this5.props.node.varname,\n\t\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\t\"screensize\": [width, height],\n\t\t\t\t\t\t\t\t\"rendersize\": [progressiveMin(width), progressiveMin(height)]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'onPresetChange',\n\t\tvalue: function onPresetChange(ev) {\n\t\t\tvar number = Number(ev.target.value);\n\t\t\tif (number === null || number === undefined) {\n\t\t\t\tconsole.error(\"invalid camera layer\");return;\n\t\t\t}\n\t\t\tvar ssize = this.getInputValue(\"screensize\");\n\t\t\tvar presets = this.getInputValue(\"presets\");\n\t\t\tif (!presets) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpresets.currentPreset = number;\n\t\t\tvar rw = progressiveMin(ssize[0]);\n\t\t\tvar rh = progressiveMin(ssize[1]);\n\t\t\tif (presets.hasOwnProperty(number)) {\n\t\t\t\tvar preset = presets[number];\n\t\t\t\tif (preset.hasOwnProperty(\"position\") && preset.hasOwnProperty(\"target\") && preset.hasOwnProperty(\"up\") && preset.hasOwnProperty(\"fov\")) {\n\t\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\t\tvarname: this.props.node.varname,\n\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\tposition: preset.position,\n\t\t\t\t\t\t\ttarget: preset.target,\n\t\t\t\t\t\t\tup: preset.up,\n\t\t\t\t\t\t\tfov: preset.fov,\n\t\t\t\t\t\t\tpresets: presets\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\tvarname: this.props.node.varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"position\": [0, 0, 300],\n\t\t\t\t\t\t\"target\": [0, 0, 0],\n\t\t\t\t\t\t\"up\": [0, 1, 0],\n\t\t\t\t\t\t\"fov\": 60,\n\t\t\t\t\t\t\"rendersize\": [rw, rh],\n\t\t\t\t\t\t\"presets\": presets\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tvar imgElem = document.getElementById(this.getCanvasName('img'));\n\t\t\timgElem.addEventListener('mousedown', this.onImgMouseDown.bind(this), true);\n\n\t\t\tvar canElem = document.getElementById(this.getCanvasName('canvas'));\n\t\t\tcanElem.addEventListener('mousedown', this.onImgMouseDown.bind(this), true);\n\n\t\t\t// canvas.tabIndex = 1000;\n\t\t\twindow.addEventListener('mouseup', this.onImgMouseUp.bind(this));\n\t\t\twindow.addEventListener('mousemove', this.onImgMouseMove.bind(this), true);\n\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.on(NODE_INPUT_CHANGED, this.imageRecieveWrap);\n\n\t\t\tvar Store_IMAGE_RECIEVED = \"image_revieved\";\n\t\t\tthis.store.on(Store_IMAGE_RECIEVED, this.imageRecieved);\n\n\t\t\tthis.store.on(\"panel_size_changed\", this.onPanelSizeChanged);\n\n\t\t\tvar presets = this.getInputValue(\"presets\");\n\t\t\tif (presets && presets.hasOwnProperty(\"currentPreset\")) {\n\t\t\t\tthis.refs.presetSelect.selectedIndex = presets.currentPreset - 1;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentWillUnmount',\n\t\tvalue: function componentWillUnmount() {\n\t\t\tvar imgElem = document.getElementById(this.getCanvasName('img'));\n\t\t\timgElem.removeEventListener('mousedown', this.onImgMouseDown.bind(this), true);\n\t\t\tvar canElem = document.getElementById(this.getCanvasName('canvas'));\n\t\t\tcanElem.addEventListener('mousedown', this.onImgMouseDown.bind(this), true);\n\n\t\t\twindow.removeEventListener('mouseup', this.onImgMouseUp.bind(this));\n\t\t\twindow.removeEventListener('mousemove', this.onImgMouseMove.bind(this));\n\t\t\tvar Store_IMAGE_RECIEVED = \"image_revieved\";\n\t\t\tthis.store.off(Store_IMAGE_RECIEVED, this.imageRecieved);\n\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.off(NODE_INPUT_CHANGED, this.imageRecieveWrap);\n\n\t\t\tthis.store.off(\"panel_size_changed\", this.onPanelSizeChanged);\n\t\t\tthis.closeForIPCImageTransfer();\n\t\t}\n\t}, {\n\t\tkey: 'styles',\n\t\tvalue: function styles() {\n\t\t\treturn {\n\t\t\t\tbounds: {\n\t\t\t\t\tminWidth: String(minWidth) + \"px\",\n\t\t\t\t\tminHeight: String(minHeight) + \"px\"\n\t\t\t\t},\n\t\t\t\tcanvas: {\n\t\t\t\t\tpostion: \"relative\",\n\t\t\t\t\tleft: \"0px\",\n\t\t\t\t\ttop: \"0px\",\n\t\t\t\t\twidth: String(this.canvasSize.bind(this)()[0]) + \"px\",\n\t\t\t\t\theight: String(this.canvasSize.bind(this)()[1]) + \"px\",\n\t\t\t\t\ttransform: \"scale(1.0,-1.0)\",\n\t\t\t\t\tdisplay: this.hasIPCAddress() ? \"block\" : \"none\"\n\t\t\t\t},\n\t\t\t\timage: {\n\t\t\t\t\tpostion: \"relative\",\n\t\t\t\t\tleft: \"0px\",\n\t\t\t\t\ttop: \"0px\",\n\t\t\t\t\twidth: String(this.canvasSize.bind(this)()[0]) + \"px\",\n\t\t\t\t\theight: String(this.canvasSize.bind(this)()[1]) + \"px\",\n\t\t\t\t\tdisplay: this.hasIPCAddress() ? \"none\" : \"block\"\n\t\t\t\t},\n\t\t\t\tcameraButtonArea: {\n\t\t\t\t\theight: \"25px\",\n\t\t\t\t\tbackgroundColor: \"rgba(67, 67, 67, 0.9)\"\n\t\t\t\t},\n\t\t\t\tcameraButton: {\n\t\t\t\t\twidth: \"32px\",\n\t\t\t\t\theight: \"20px\",\n\t\t\t\t\tfloat: \"left\",\n\t\t\t\t\tbackgroundColor: \"gray\",\n\t\t\t\t\tborder: \"1px solid darkgray\",\n\t\t\t\t\tborderRadius: \"3px\",\n\t\t\t\t\tmargin: \"2px\",\n\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\tfontSize: \"11px\"\n\t\t\t\t},\n\t\t\t\tregisterButton: {\n\t\t\t\t\twidth: \"50px\",\n\t\t\t\t\theight: \"20px\",\n\t\t\t\t\tbackgroundColor: \"gray\",\n\t\t\t\t\tborder: \"1px solid darkgray\",\n\t\t\t\t\tborderRadius: \"3px\",\n\t\t\t\t\tmarginLeft: \"2px\",\n\t\t\t\t\ttextAlign: \"center\",\n\t\t\t\t\tfontSize: \"11px\",\n\t\t\t\t\tposition: \"absolute\"\n\t\t\t\t},\n\t\t\t\tpresetArea: {\n\t\t\t\t\theight: \"25px\",\n\t\t\t\t\tpadding: \"2px\",\n\t\t\t\t\tbackgroundColor: \"rgba(67, 67, 67, 0.9)\"\n\t\t\t\t},\n\t\t\t\tpresetsSelect: {\n\t\t\t\t\twidth: \"100px\",\n\t\t\t\t\theight: \"20px\",\n\t\t\t\t\tbackgroundColor: \"white\"\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t/*onChange(i, event) {\n      let text = event.target.value;\n      this.setState({text});\n      const inputs = JSON.parse(JSON.stringify(this.node.input));\n      inputs[5].value[i] = parseFloat(text);\n      const varname = this.node.varname;\n      this.action.changeNode({\n          varname: varname,\n          input: inputs\n      });\n  }*/\n\n\t}, {\n\t\tkey: 'onEnterCameraButton',\n\t\tvalue: function onEnterCameraButton(ev) {\n\t\t\tev.target.style.backgroundColor = \"darkgray\";\n\t\t\tev.target.style.cursor = \"pointer\";\n\t\t}\n\t}, {\n\t\tkey: 'onLeaveCameraButton',\n\t\tvalue: function onLeaveCameraButton(ev) {\n\t\t\tev.target.style.backgroundColor = \"gray\";\n\t\t\tev.target.style.cursor = \"default\";\n\t\t}\n\t}, {\n\t\tkey: 'onClickCameraRegisterButton',\n\t\tvalue: function onClickCameraRegisterButton(ev) {\n\t\t\tthis.updatePreset();\n\t\t}\n\t}, {\n\t\tkey: 'onClickCameraButton',\n\t\tvalue: function onClickCameraButton(ev) {\n\t\t\tvar varname = this.node.varname;\n\t\t\tvar pos = this.getInputValue('position');\n\t\t\tvar tar = this.getInputValue('target');\n\t\t\tvar up = this.getInputValue('up');\n\t\t\tvar len = length(subtract(tar, pos));\n\t\t\tvar ssize = this.getInputValue(\"screensize\");\n\t\t\tvar rw = progressiveMin(ssize[0]);\n\t\t\tvar rh = progressiveMin(ssize[1]);\n\n\t\t\tif (ev.target === this.refs.reset) {\n\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\tvarname: varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"position\": [0, 0, 300],\n\t\t\t\t\t\t\"target\": [0, 0, 0],\n\t\t\t\t\t\t\"up\": [0, 1, 0],\n\t\t\t\t\t\t\"fov\": 60,\n\t\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (ev.target === this.refs.plusX) {\n\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\tvarname: varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"position\": [len, tar[1], tar[2]],\n\t\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (ev.target === this.refs.minusX) {\n\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\tvarname: varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"position\": [-len, tar[1], tar[2]],\n\t\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (ev.target === this.refs.plusY) {\n\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\tvarname: varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"position\": [tar[0], len, tar[2] + 0.001],\n\t\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (ev.target === this.refs.minusY) {\n\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\tvarname: varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"position\": [tar[0], -len, tar[2] + 0.001],\n\t\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (ev.target === this.refs.plusZ) {\n\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\tvarname: varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"position\": [tar[0], tar[1], -len],\n\t\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (ev.target === this.refs.minusZ) {\n\t\t\t\tthis.action.changeNodeInput({\n\t\t\t\t\tvarname: varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"position\": [tar[0], tar[1], len],\n\t\t\t\t\t\t\"rendersize\": [rw, rh]\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'canvasSize',\n\t\tvalue: function canvasSize() {\n\t\t\tif (this.refs.canvas_wrap) {\n\t\t\t\tvar ssize = JSON.parse(JSON.stringify(this.getInputValue(\"screensize\")));\n\t\t\t\treturn [Math.max(Number(ssize[0]), minWidth), Math.max(Number(ssize[1]), minHeight)];\n\t\t\t}\n\t\t\treturn [Math.max(this.props.node.panel.size[0], minWidth), Math.max(this.props.node.panel.size[1], minHeight)];\n\t\t}\n\t}, {\n\t\tkey: 'content',\n\t\tvalue: function content() {\n\t\t\tvar styles = this.styles();\n\t\t\treturn _react2['default'].createElement(\n\t\t\t\t'div',\n\t\t\t\t{ style: styles.bounds },\n\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ ref: 'canvas_wrap' },\n\t\t\t\t\t_react2['default'].createElement('canvas', { id: this.getCanvasName('canvas'), style: styles.canvas,\n\t\t\t\t\t\twidth: this.canvasSize.bind(this)()[0],\n\t\t\t\t\t\theight: this.canvasSize.bind(this)()[1] })\n\t\t\t\t),\n\t\t\t\t_react2['default'].createElement('img', { id: this.getCanvasName('img'), style: styles.image, src: '' }),\n\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ style: styles.cameraButtonArea },\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ ref: 'reset', style: styles.cameraButton,\n\t\t\t\t\t\t\tonClick: this.onClickCameraButton,\n\t\t\t\t\t\t\tonMouseEnter: this.onEnterCameraButton,\n\t\t\t\t\t\t\tonMouseLeave: this.onLeaveCameraButton },\n\t\t\t\t\t\t'Reset'\n\t\t\t\t\t),\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ ref: 'plusX', style: styles.cameraButton,\n\t\t\t\t\t\t\tonClick: this.onClickCameraButton,\n\t\t\t\t\t\t\tonMouseEnter: this.onEnterCameraButton,\n\t\t\t\t\t\t\tonMouseLeave: this.onLeaveCameraButton },\n\t\t\t\t\t\t'+X'\n\t\t\t\t\t),\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ ref: 'minusX', style: styles.cameraButton,\n\t\t\t\t\t\t\tonClick: this.onClickCameraButton,\n\t\t\t\t\t\t\tonMouseEnter: this.onEnterCameraButton,\n\t\t\t\t\t\t\tonMouseLeave: this.onLeaveCameraButton },\n\t\t\t\t\t\t'-X'\n\t\t\t\t\t),\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ ref: 'plusY', style: styles.cameraButton,\n\t\t\t\t\t\t\tonClick: this.onClickCameraButton,\n\t\t\t\t\t\t\tonMouseEnter: this.onEnterCameraButton,\n\t\t\t\t\t\t\tonMouseLeave: this.onLeaveCameraButton },\n\t\t\t\t\t\t'+Y'\n\t\t\t\t\t),\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ ref: 'minusY', style: styles.cameraButton,\n\t\t\t\t\t\t\tonClick: this.onClickCameraButton,\n\t\t\t\t\t\t\tonMouseEnter: this.onEnterCameraButton,\n\t\t\t\t\t\t\tonMouseLeave: this.onLeaveCameraButton },\n\t\t\t\t\t\t'-Y'\n\t\t\t\t\t),\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ ref: 'plusZ', style: styles.cameraButton,\n\t\t\t\t\t\t\tonClick: this.onClickCameraButton,\n\t\t\t\t\t\t\tonMouseEnter: this.onEnterCameraButton,\n\t\t\t\t\t\t\tonMouseLeave: this.onLeaveCameraButton },\n\t\t\t\t\t\t'+Z'\n\t\t\t\t\t),\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{ ref: 'minusZ', style: styles.cameraButton,\n\t\t\t\t\t\t\tonClick: this.onClickCameraButton,\n\t\t\t\t\t\t\tonMouseEnter: this.onEnterCameraButton,\n\t\t\t\t\t\t\tonMouseLeave: this.onLeaveCameraButton },\n\t\t\t\t\t\t'-Z'\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ style: styles.presetArea },\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'span',\n\t\t\t\t\t\t{ style: { marginLeft: \"3px\", marginRight: \"3px\", fontSize: \"11px\" } },\n\t\t\t\t\t\t'Camera:'\n\t\t\t\t\t),\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'select',\n\t\t\t\t\t\t{ ref: 'presetSelect', style: styles.presetSelect, onChange: this.onPresetChange.bind(this) },\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'1'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'2'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'3'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'4'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'5'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'6'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'7'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'8'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'9'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t'10'\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t\t'span',\n\t\t\t\t\t\t{ ref: 'registerButton', style: styles.registerButton,\n\t\t\t\t\t\t\tonClick: this.onClickCameraRegisterButton,\n\t\t\t\t\t\t\tonMouseEnter: this.onEnterCameraButton,\n\t\t\t\t\t\t\tonMouseLeave: this.onLeaveCameraButton },\n\t\t\t\t\t\t'Register'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}, {\n\t\tkey: 'getCanvasName',\n\t\tvalue: function getCanvasName(prefix) {\n\t\t\treturn prefix + '-' + this.varname;\n\t\t}\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar styles = this.styles();\n\t\t\treturn this.content();\n\t\t}\n\t}]);\n\n\treturn RenderView;\n})(_react2['default'].Component);\n\nmodule.exports = RenderView;",
      "varname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997",
      "label": "",
      "select": false,
      "node": {
        "close": false,
        "pos": [
          2166.25,
          1855.0625
        ],
        "zindex": 0
      },
      "panel": {
        "visible": true,
        "size": [
          256,
          306
        ],
        "pos": [
          150,
          150
        ],
        "zindex": -1
      }
    },
    {
      "name": "ImageSet",
      "funcname": "ImageSet",
      "info": "imageを一時的にメモリに格納するノード",
      "customfuncfile": "imageset.lua",
      "uifile": "imageset.jsx",
      "input": [
        {
          "name": "image",
          "type": "BufferImageData",
          "nodeVarname": "ImageSetfb431896_c992_4b5a_b510_5656e6894f1a"
        },
        {
          "name": "id",
          "type": "string",
          "value": "",
          "nodeVarname": "ImageSetfb431896_c992_4b5a_b510_5656e6894f1a"
        },
        {
          "name": "delete",
          "type": "bool",
          "value": false,
          "visible": false,
          "nodeVarname": "ImageSetfb431896_c992_4b5a_b510_5656e6894f1a"
        },
        {
          "name": "deleteall",
          "type": "bool",
          "value": false,
          "visible": false,
          "nodeVarname": "ImageSetfb431896_c992_4b5a_b510_5656e6894f1a"
        },
        {
          "name": "selected",
          "type": "string",
          "value": [],
          "visible": false,
          "nodeVarname": "ImageSetfb431896_c992_4b5a_b510_5656e6894f1a"
        }
      ],
      "output": [],
      "customfunc": "ImageSet = {}\nsetmetatable(ImageSet, {__index = HiveBaseModule})\n\nlocal JSON = require('dkjson')\n\nImageSet.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    setmetatable(this, {__index=ImageSet})\n    this.saver = ImageSaver()\n    this.loader = ImageLoader()\n    return this\nend\n\nfunction ImageSet:SendImageIDs()\n    if targetClientId == nil then\n        return\n    end\n    local imageIDs = getBufferDataNames()\n    \n    if network then\n        local data = {}\n        data[\"JSONRPC\"] = \"2.0\"\n        data[\"method\"] = \"luaData\"\n        data[\"to\"] = targetClientId\n        data[\"id\"] = 0\n        data[\"param\"] = {}\n        data[\"param\"][\"name\"] = \"ImageSet\"\n        data[\"param\"][\"type\"] = \"imageids\"\n        data[\"param\"][\"images\"] = imageIDs\n        network:SendJSON( JSON.encode(data) );\n    end\nend\n\nfunction ImageSet:Do()\n    self:UpdateValue()\n    local v = self.value\n    local id = v.id\n    local image = v.image\n    local selected = v.selected\n    \n    if image ~= nil and id ~= \"\" then\n        -- Copy image\n        self.loader:LoadImageData(image);\n        local copy = self.loader:ImageData();\n        \n        setBufferData(id, copy);\n        self:SendImageIDs();\n        print(\"image saved\")\n    end\n    \n    if v.delete == true then\n        selected = string.gsub(selected, \"'\", \"\\\"\")\n        local selectList = JSON.decode(selected)\n        if selectList ~= nil then\n            if #selectList.selected > 0 then\n                for i, image in ipairs(selectList.selected) do\n                    deleteBufferData(image);\n                    print(\"ImageSet:\" .. image .. \" deleted\")\n                end\n            end\n        end\n        self:SendImageIDs();\n    end\n    if v.deleteall == true then\n        clearBufferData();\n        self:SendImageIDs();\n        print(\"ImageSet: delete all the images\")\n    end\n    \n    return true\nend\n",
      "uiFunc": "\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar ImageSet = (function (_React$Component) {\n\t_inherits(ImageSet, _React$Component);\n\n\tfunction ImageSet(props) {\n\t\t_classCallCheck(this, ImageSet);\n\n\t\t_get(Object.getPrototypeOf(ImageSet.prototype), \"constructor\", this).call(this, props);\n\n\t\tthis.state = {\n\t\t\timages: []\n\t\t};\n\n\t\tthis.store = this.props.store;\n\t\tthis.action = this.props.action;\n\t\tthis.node = this.props.node;\n\n\t\tthis.nodeInputChanged = this.nodeInputChanged.bind(this);\n\t\tthis.componentDidUpdate = this.componentDidUpdate.bind(this);\n\t\tthis.componentDidMount = this.componentDidMount.bind(this);\n\t\tthis.componentWillUnmount = this.componentWillUnmount.bind(this);\n\t\tthis.luaDataRecieved = this.luaDataRecieved.bind(this);\n\t}\n\n\t_createClass(ImageSet, [{\n\t\tkey: \"componentDidUpdate\",\n\t\tvalue: function componentDidUpdate() {}\n\t}, {\n\t\tkey: \"onSelectChange\",\n\t\tvalue: function onSelectChange(ev) {\n\t\t\tvar options = ev.target.options;\n\t\t\tvar selected = { selected: [] };\n\n\t\t\tfor (var i = 0; i < options.length; ++i) {\n\t\t\t\tif (options[i].selected) {\n\t\t\t\t\tselected.selected.push(options[i].value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(selected);\n\t\t\tthis.props.action.changeNodeInput({\n\t\t\t\tvarname: this.props.node.varname,\n\t\t\t\tinput: {\n\t\t\t\t\t\"selected\": JSON.stringify(selected).split(\"\\\"\").join(\"'\")\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"nodeInputChanged\",\n\t\tvalue: function nodeInputChanged(err, data) {\n\t\t\tvar _this = this;\n\n\t\t\tvar varname = this.node.varname;\n\t\t\tif (varname !== data.varname) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (data.input[2].value === true) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t_this.props.action.changeNodeInput({\n\t\t\t\t\t\tvarname: _this.props.node.varname,\n\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\"delete\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t\tif (data.input[3].value === true) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t_this.props.action.changeNodeInput({\n\t\t\t\t\t\tvarname: _this.props.node.varname,\n\t\t\t\t\t\tinput: {\n\t\t\t\t\t\t\t\"deleteall\": false\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"componentDidMount\",\n\t\tvalue: function componentDidMount() {\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.on(NODE_INPUT_CHANGED, this.nodeInputChanged);\n\t\t\tthis.store.on(\"lua_data_recieved\", this.luaDataRecieved);\n\t\t}\n\t}, {\n\t\tkey: \"componentWillUnmount\",\n\t\tvalue: function componentWillUnmount() {\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.off(NODE_INPUT_CHANGED, this.nodeInputChanged);\n\t\t\tthis.store.off(\"lua_data_recieved\", this.luaDataRecieved);\n\t\t}\n\t}, {\n\t\tkey: \"luaDataRecieved\",\n\t\tvalue: function luaDataRecieved(data) {\n\t\t\tif (data.hasOwnProperty(\"name\") && data.name === this.node.name) {\n\t\t\t\tif (data.hasOwnProperty('images')) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\timages: JSON.parse(JSON.stringify(data.images))\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"onDeleteClicked\",\n\t\tvalue: function onDeleteClicked() {\n\t\t\tthis.props.action.changeNodeInput({\n\t\t\t\tvarname: this.props.node.varname,\n\t\t\t\tinput: {\n\t\t\t\t\t\"delete\": true\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"onDeleteAllClicked\",\n\t\tvalue: function onDeleteAllClicked() {\n\t\t\tthis.props.action.changeNodeInput({\n\t\t\t\tvarname: this.props.node.varname,\n\t\t\t\tinput: {\n\t\t\t\t\t\"deleteall\": true\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"options\",\n\t\tvalue: function options() {\n\t\t\tvar sorted = this.state.images.sort(function (a, b) {\n\t\t\t\treturn a - b;\n\t\t\t});\n\t\t\tvar options = sorted.map(function (id, index) {\n\t\t\t\treturn _react2[\"default\"].createElement(\n\t\t\t\t\t\"option\",\n\t\t\t\t\t{ key: id + \"_\" + String(index) },\n\t\t\t\t\tid\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn options;\n\t\t}\n\t}, {\n\t\tkey: \"render\",\n\t\tvalue: function render() {\n\t\t\treturn _react2[\"default\"].createElement(\n\t\t\t\t\"div\",\n\t\t\t\t{ className: 'imageset', style: { margin: '4', minWidth: \"150px\", minHeight: \"100px\", height: '100%', padding: '2' } },\n\t\t\t\t_react2[\"default\"].createElement(\n\t\t\t\t\t\"div\",\n\t\t\t\t\tnull,\n\t\t\t\t\t\"images\"\n\t\t\t\t),\n\t\t\t\t_react2[\"default\"].createElement(\n\t\t\t\t\t\"select\",\n\t\t\t\t\t{ multiple: true, style: { width: \"150px\", height: \"100px\" }, onChange: this.onSelectChange.bind(this) },\n\t\t\t\t\tthis.options.bind(this)()\n\t\t\t\t),\n\t\t\t\t_react2[\"default\"].createElement(\n\t\t\t\t\t\"div\",\n\t\t\t\t\tnull,\n\t\t\t\t\t_react2[\"default\"].createElement(\"input\", { type: \"button\", style: { marginTop: \"5px\", width: \"130px\" }, onClick: this.onDeleteClicked.bind(this), value: \"Delete Selected\" })\n\t\t\t\t),\n\t\t\t\t_react2[\"default\"].createElement(\n\t\t\t\t\t\"div\",\n\t\t\t\t\tnull,\n\t\t\t\t\t_react2[\"default\"].createElement(\"input\", { type: \"button\", style: { marginTop: \"5px\", width: \"130px\" }, onClick: this.onDeleteAllClicked.bind(this), value: \"Delete All\" })\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}]);\n\n\treturn ImageSet;\n})(_react2[\"default\"].Component);\n\nmodule.exports = ImageSet;",
      "varname": "ImageSetfb431896_c992_4b5a_b510_5656e6894f1a",
      "label": "",
      "select": false,
      "node": {
        "close": false,
        "pos": [
          2880.3125,
          2267.8125
        ],
        "zindex": 0
      },
      "panel": {
        "visible": true,
        "size": [
          100,
          100
        ],
        "pos": [
          169.5454545454545,
          518.4304453935326
        ],
        "zindex": -1
      }
    },
    {
      "name": "ImageView",
      "funcname": "ImageView",
      "info": "imageviewをつくるノード",
      "customfuncfile": "imageview.lua",
      "uifile": "imageview.jsx",
      "input": [
        {
          "name": "image",
          "type": "BufferImageData",
          "nodeVarname": "ImageViewde2318f6_5fe8_458e_8a26_4bca72fc0c2c"
        },
        {
          "name": "ipcmode",
          "type": "bool",
          "value": false,
          "hole": false,
          "nodeVarname": "ImageViewde2318f6_5fe8_458e_8a26_4bca72fc0c2c"
        }
      ],
      "output": [],
      "customfunc": "ImageView = {}\nsetmetatable(ImageView, {__index = HiveBaseModule})\n\nImageView.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    setmetatable(this, {__index=ImageView})\n    return this\nend\n\nfunction ImageView:Do()\n    -- nothing to do\n    self:UpdateValue()\n    print(\"selfvarname\", self.varname)\n    \n    local v = self.value\n    if (v.image == nil) then\n        return false\n    end\n    local mode = 'png'\n    -- image save\n    local imageBuffer\n    local imageBufferSize\n    if v.ipcmode then\n        mode = 'raw'\n        -- image save\n        imageBuffer = v.image:GetBuffer()\n        imageBufferSize = v.image:GetSize()\n    else\n        -- image save\n        imageBuffer = HIVE_ImageSaver:SaveMemory(5, v.image) --png\n        imageBufferSize = HIVE_ImageSaver:MemorySize()\n    end\n    \n    -- create metabinary\n    --local w = v.screensize[1]\n    --local h = v.screensize[2]\n    local w = v.image:GetWidth()\n    local h = v.image:GetHeight()\n    print('rendersize=('.. w ..\",\".. h ..\")\", 'cancel=', tostring(HIVE_isRenderCanceled))\n    \n    if targetClientId == nil then\n        return false\n    end\n    local json = [[{\n            \"JSONRPC\" : \"2.0\",\n            \"method\" : \"renderedImage\",            \n            \"to\" : ]] .. targetClientId ..[[,\n            \"param\" : {\n                \"type\" : \"]] .. mode .. [[\",\n                \"width\" : \"]] .. w .. [[\",\n                \"height\" : \"]] .. h .. [[\",\n                \"canceled\": ]] .. tostring(HIVE_isRenderCanceled) .. [[,\n                \"varname\": \"]] .. self.varname .. [[\"\n            },\n            \"id\":0\n    }]]\n    HIVE_metabin:Create(json, imageBuffer, imageBufferSize)\n    --print('JSON=', json, 'size=', imageBufferSize)\n    -- send\n    print('ipcmode', v.ipcmode)        \n    if v.ipcmode then       \n        if self.network_ipc == nil then\n            local ipcAddress = 'ipc:///tmp/HIVE_IPC_' .. self.varname\n            print('IPC open=', ipcAddress);\n\t        self.network_ipc = require(\"Network\").Connection()\n\t        local ipcr = self.network_ipc:Connect(ipcAddress)\n\t        print('IPC ret=', ipcr)\n        end\n        print('IPC->', self.network_ipc)\n        self.network_ipc:SendBinary(HIVE_metabin:BinaryBuffer(), HIVE_metabin:BinaryBufferSize())\n        print('IPC SEND!!!!!!!!!!!')\t\t\t   \n\n    else\n        network:SendBinary(HIVE_metabin:BinaryBuffer(), HIVE_metabin:BinaryBufferSize())\n        print('WEBSOCKET SEND!!!!!!!!!!!')\t\t\t   \n\n    end\n    return true\nend\n",
      "uiFunc": "'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar minWidth = 256;\nvar minHeight = 100;\nvar footerHeight = 50;\n\nvar ImageView = (function (_React$Component) {\n\t_inherits(ImageView, _React$Component);\n\n\tfunction ImageView(props) {\n\t\t_classCallCheck(this, ImageView);\n\n\t\t_get(Object.getPrototypeOf(ImageView.prototype), 'constructor', this).call(this, props);\n\t\tthis.node = props.node;\n\t\tthis.action = props.action;\n\t\tthis.store = props.store;\n\n\t\tthis.varname = this.node.varname;\n\n\t\tthis.state = {\n\t\t\twidth: this.canvasSize()[0],\n\t\t\theight: this.canvasSize()[1]\n\t\t};\n\n\t\tthis.componentDidUpdate = this.componentDidUpdate.bind(this);\n\t\tthis.imageRecieved = this.imageRecieved.bind(this);\n\t\tthis.imageRecieveWrap = this.imageRecieveWrap.bind(this);\n\t\tthis.onPanelSizeChanged = this.onPanelSizeChanged.bind(this);\n\t\tthis.getInputValue = this.getInputValue.bind(this);\n\t\tthis.imageSize = null;\n\t}\n\n\t_createClass(ImageView, [{\n\t\tkey: 'imageUpdate',\n\t\tvalue: function imageUpdate(param) {\n\t\t\tvar w = param.width;\n\t\t\tvar h = param.height;\n\t\t\tvar varname = this.node.varname;\n\t\t}\n\t}, {\n\t\tkey: 'imageRecieved',\n\t\tvalue: function imageRecieved(err, param, data) {\n\t\t\tvar buffer;\n\t\t\tvar varname = this.node.varname;\n\t\t\tif (param.varname !== varname) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (param.type === 'jpg') {\n\t\t\t\tbuffer = new Blob([data]);\n\t\t\t} else if (param.type === 'png') {\n\t\t\t\tbuffer = new Blob([data]);\n\t\t\t} else {\n\t\t\t\tbuffer = data;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\timage: buffer\n\t\t\t});\n\t\t\tthis.imageSize = [parseFloat(param.width), parseFloat(param.height)];\n\n\t\t\tthis.imageUpdate(param);\n\t\t}\n\t}, {\n\t\tkey: 'readyForIPCImageTransfer',\n\t\tvalue: function readyForIPCImageTransfer() {\n\t\t\tvar _this = this;\n\n\t\t\t// Electron only\n\t\t\tif (this.sc === undefined && window && window.process && window.process.type) {\n\t\t\t\tvar nano = process.mainModule.require('nanomsg');\n\t\t\t\tvar buffercopy = process.mainModule.require('buffercopy');\n\t\t\t\tvar sc = nano.socket('pair');\n\t\t\t\tthis.sc = sc;\n\t\t\t\tvar meta = process.mainModule.require(process.mainModule.require(\"path\").resolve('./lib/metabinary')); // path from index.html\n\t\t\t\tthis.meta = meta;\n\t\t\t\tvar ipcAddress = 'ipc:///tmp/HIVE_IPC_' + this.varname;\n\t\t\t\tvar ret = sc.bind(ipcAddress);\n\t\t\t\tconsole.log('IPC bind = ', ret, ipcAddress);\n\n\t\t\t\tthis.sc.on('data', function (data) {\n\t\t\t\t\tif (!_this.meta.loadMetaBinary(data, function (meta, data) {\n\t\t\t\t\t\tvar w,\n\t\t\t\t\t\t    h,\n\t\t\t\t\t\t    param = meta.param;\n\n\t\t\t\t\t\tconsole.log(\"param\", param);\n\t\t\t\t\t\tif (param.type === 'jpg') {\n\t\t\t\t\t\t\t// resultElement is img.\n\t\t\t\t\t\t\tvar resultElement = document.getElementById(_this.getCanvasName('img'));\n\t\t\t\t\t\t\tresultElement.src = URL.createObjectURL(new Blob([data], { type: \"image/jpeg\" }));\n\t\t\t\t\t\t} else if (param.type === 'png') {\n\t\t\t\t\t\t\t// resultElement is img.\n\t\t\t\t\t\t\tvar resultElement = document.getElementById(_this.getCanvasName('img'));\n\t\t\t\t\t\t\tresultElement.src = URL.createObjectURL(new Blob([data], { type: \"image/png\" }));\n\t\t\t\t\t\t} else if (param.type === 'raw') {\n\t\t\t\t\t\t\t// resultElement is canvas.\n\t\t\t\t\t\t\tvar resultElement = document.getElementById(_this.getCanvasName('canvas'));\n\t\t\t\t\t\t\tif (resultElement) {\n\t\t\t\t\t\t\t\t// why undefined, sometime??\n\t\t\t\t\t\t\t\tresultElement.setAttribute('width', param.width), resultElement.setAttribute('height', param.height);\n\t\t\t\t\t\t\t\tvar context = resultElement.getContext('2d');\n\t\t\t\t\t\t\t\tvar imageData = context.createImageData(param.width, param.height);\n\t\t\t\t\t\t\t\tbuffercopy.buffercopy(data, imageData.data);\n\t\t\t\t\t\t\t\t_this.setState({\n\t\t\t\t\t\t\t\t\timageData: imageData\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t_this.imageSize = [param.width, param.height];\n\t\t\t\t\t\t\t\tcontext.putImageData(imageData, 0, 0);\n\n\t\t\t\t\t\t\t\t_this.imageUpdate(param);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})) {\n\t\t\t\t\t\tconsole.error('Not metabin foramt');\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'getCanvasName',\n\t\tvalue: function getCanvasName(prefix) {\n\t\t\treturn prefix + '-' + this.varname;\n\t\t}\n\t}, {\n\t\tkey: 'getInputValue',\n\t\tvalue: function getInputValue(key) {\n\t\t\tfor (var i = 0; i < this.node.input.length; i = i + 1) {\n\t\t\t\tif (this.node.input[i].name === key) {\n\t\t\t\t\treturn this.node.input[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'hasIPCAddress',\n\t\tvalue: function hasIPCAddress() {\n\t\t\treturn this.getInputValue('ipcmode');\n\t\t}\n\t}, {\n\t\tkey: 'imageRecieveWrap',\n\t\tvalue: function imageRecieveWrap(err, data) {\n\t\t\tif (data.varname !== this.node.varname) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasIPCAddress()) {\n\t\t\t\tthis.readyForIPCImageTransfer();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'closeForIPCImageTransfer',\n\t\tvalue: function closeForIPCImageTransfer() {\n\t\t\tif (this.sc === undefined) {} else {\n\t\t\t\tthis.sc.close();\n\t\t\t\tthis.sc = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tvar Store_IMAGE_RECIEVED = \"image_revieved\";\n\t\t\tthis.store.on(Store_IMAGE_RECIEVED, this.imageRecieved);\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.on(NODE_INPUT_CHANGED, this.imageRecieveWrap);\n\t\t\tthis.store.on(\"panel_size_changed\", this.onPanelSizeChanged);\n\t\t}\n\t}, {\n\t\tkey: 'componentWillUnmount',\n\t\tvalue: function componentWillUnmount() {\n\t\t\tvar Store_IMAGE_RECIEVED = \"image_revieved\";\n\t\t\tthis.store.off(Store_IMAGE_RECIEVED, this.imageRecieved);\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.off(NODE_INPUT_CHANGED, this.imageRecieveWrap);\n\t\t\tthis.store.off(\"panel_size_changed\", this.onPanelSizeChanged);\n\t\t\tthis.closeForIPCImageTransfer();\n\t\t}\n\t}, {\n\t\tkey: 'onPanelSizeChanged',\n\t\tvalue: function onPanelSizeChanged(err, data) {\n\t\t\tif (data.varname !== this.node.varname) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.props.node.panel.visible) {\n\t\t\t\tvar width = Math.max(this.props.node.panel.size[0], minWidth);\n\t\t\t\tvar height = Math.max(this.props.node.panel.size[1] - footerHeight, minHeight);\n\t\t\t\tif (Number(this.state.width) !== width || Number(this.state.height) !== height) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\twidth: width,\n\t\t\t\t\t\theight: height\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentDidUpdate',\n\t\tvalue: function componentDidUpdate() {\n\t\t\t// キャンバスの更新.\n\t\t\tif (this.state && this.state.image) {\n\t\t\t\tif (!this.hasIPCAddress()) {\n\t\t\t\t\tvar imgElem = document.getElementById(this.getCanvasName('img'));\n\t\t\t\t\timgElem.src = URL.createObjectURL(this.state.image, { type: \"image/jpeg\" });\n\t\t\t\t} else {\n\t\t\t\t\tif (this.imageSize) {\n\t\t\t\t\t\tvar canvas = document.getElementById(this.getCanvasName('canvas'));\n\t\t\t\t\t\tcanvas.setAttribute('width', this.imageSize[0]);\n\t\t\t\t\t\tcanvas.setAttribute('height', this.imageSize[1]);\n\t\t\t\t\t\tvar context = canvas.getContext('2d');\n\t\t\t\t\t\tcontext.putImageData(this.state.imageData, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'canvasSize',\n\t\tvalue: function canvasSize() {\n\t\t\treturn [Math.max(this.props.node.panel.size[0], minWidth), Math.max(this.props.node.panel.size[1], minHeight)];\n\t\t}\n\t}, {\n\t\tkey: 'aspectCanvasSize',\n\t\tvalue: function aspectCanvasSize() {\n\t\t\tif (this.imageSize) {\n\t\t\t\tvar aspect = this.imageSize[0] / this.imageSize[1];\n\t\t\t\tvar w = Math.max(this.props.node.panel.size[0], minWidth);\n\t\t\t\treturn [w, w / aspect];\n\t\t\t}\n\t\t\treturn [Math.max(this.props.node.panel.size[0], minWidth), Math.max(this.props.node.panel.size[1], minHeight)];\n\t\t}\n\t}, {\n\t\tkey: 'aspectImageSize',\n\t\tvalue: function aspectImageSize() {\n\t\t\tif (this.imageSize) {\n\t\t\t\tvar aspect = this.imageSize[0] / this.imageSize[1];\n\t\t\t\tvar w = Math.max(this.state.width, minWidth);\n\t\t\t\treturn [w, w / aspect];\n\t\t\t}\n\t\t\treturn [Math.max(this.state.width, minWidth), Math.max(this.state.height, minHeight)];\n\t\t}\n\t}, {\n\t\tkey: 'styles',\n\t\tvalue: function styles() {\n\t\t\treturn {\n\t\t\t\tbounds: {\n\t\t\t\t\tminWidth: String(minWidth) + \"px\",\n\t\t\t\t\tminHeight: String(minHeight) + \"px\"\n\t\t\t\t},\n\t\t\t\tcanvas: {\n\t\t\t\t\tpostion: \"relative\",\n\t\t\t\t\tleft: \"0px\",\n\t\t\t\t\ttop: \"0px\",\n\t\t\t\t\twidth: String(this.aspectCanvasSize.bind(this)()[0]) + \"px\",\n\t\t\t\t\theight: String(this.aspectCanvasSize.bind(this)()[1]) + \"px\",\n\t\t\t\t\ttransform: \"scale(1.0,-1.0)\",\n\t\t\t\t\tdisplay: this.hasIPCAddress() ? \"block\" : \"none\"\n\t\t\t\t},\n\t\t\t\timage: {\n\t\t\t\t\tpostion: \"relative\",\n\t\t\t\t\tleft: \"0px\",\n\t\t\t\t\ttop: \"0px\",\n\t\t\t\t\twidth: String(this.aspectImageSize.bind(this)()[0]) + \"px\",\n\t\t\t\t\theight: String(this.aspectImageSize.bind(this)()[1]) + \"px\",\n\t\t\t\t\tdisplay: this.hasIPCAddress() ? \"none\" : \"block\"\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar styles = this.styles();\n\t\t\treturn _react2['default'].createElement(\n\t\t\t\t'div',\n\t\t\t\t{ style: { minWidth: \"250px\", height: '250' } },\n\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ ref: 'canvas_wrap' },\n\t\t\t\t\t_react2['default'].createElement('canvas', { id: this.getCanvasName('canvas'), style: styles.canvas,\n\t\t\t\t\t\twidth: this.canvasSize.bind(this)()[0],\n\t\t\t\t\t\theight: this.canvasSize.bind(this)()[1] })\n\t\t\t\t),\n\t\t\t\t_react2['default'].createElement('img', { id: this.getCanvasName('img'), style: styles.image, src: '' })\n\t\t\t);\n\t\t}\n\t}]);\n\n\treturn ImageView;\n})(_react2['default'].Component);\n\nmodule.exports = ImageView;",
      "varname": "ImageViewde2318f6_5fe8_458e_8a26_4bca72fc0c2c",
      "label": "",
      "select": false,
      "node": {
        "close": false,
        "pos": [
          2546.777777777778,
          2373.5555555555557
        ],
        "zindex": 0
      },
      "panel": {
        "visible": true,
        "size": [
          100,
          100
        ],
        "pos": [
          134.07426856714164,
          755.2933233308328
        ],
        "zindex": 6
      }
    },
    {
      "name": "FilterImage",
      "funcname": "FilterImage",
      "info": "画像処理ノード",
      "customfuncfile": "filterimage.lua",
      "uifile": "filterimage.jsx",
      "input": [
        {
          "name": "image0",
          "type": "BufferImageData",
          "nodeVarname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4"
        },
        {
          "name": "image1",
          "type": "BufferImageData",
          "nodeVarname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4"
        },
        {
          "name": "factor",
          "type": "float",
          "value": 1,
          "nodeVarname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4"
        },
        {
          "name": "operation",
          "type": "float",
          "value": 4,
          "visible": false,
          "nodeVarname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4"
        }
      ],
      "output": [
        {
          "name": "result",
          "type": "BufferImageData",
          "nodeVarname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4"
        }
      ],
      "customfunc": "FilterImage = {}\nsetmetatable(FilterImage, {__index = HiveBaseModule})\n\nFilterImage.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    setmetatable(this, {__index=FilterImage});\n    this.filter = require(\"ImageFilter\")();\n    this.res = nil;\n    return this\nend\n\nfunction FilterImage:Do()\n    self:UpdateValue()\n    local v = self.value;\n    local image0 = v.image0;\n    local image1 = v.image1;\n    local ope = v.operation;\n    local factor = v.factor;\n    if image1 ~= nil then\n        self.res = image1;\n    end\n    if image0 ~= nil then\n        self.res = image0;\n    end\n    if image0 ~= nil and image1 ~= nil and tonumber(ope) > 0 and tonumber(ope) <= 4 then\n        if image0:GetWidth() == image1:GetWidth() \n            and image0:GetHeight() == image1:GetHeight()\n            and image0:GetFormat() == image1:GetFormat() then\n            self.res = self.filter:Filter(ope, image0, image1, factor);\n        end\n    end\n    return true\nend\n\nfunction FilterImage:result()\n    return self.res;\nend\n",
      "uiFunc": "\"use strict\";\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactSlider = require(\"react-slider\");\n\nvar _reactSlider2 = _interopRequireDefault(_reactSlider);\n\nvar ImageSet = (function (_React$Component) {\n\t_inherits(ImageSet, _React$Component);\n\n\tfunction ImageSet(props) {\n\t\t_classCallCheck(this, ImageSet);\n\n\t\t_get(Object.getPrototypeOf(ImageSet.prototype), \"constructor\", this).call(this, props);\n\n\t\tthis.store = props.store;\n\t\tthis.action = props.action;\n\t\tthis.node = props.node;\n\n\t\tthis.filterNameToID = {\n\t\t\t\"Add\": 1,\n\t\t\t\"Subtract\": 2,\n\t\t\t\"Multiply\": 3,\n\t\t\t\"Average\": 4\n\t\t};\n\t\tthis.getOperationName = this.getOperationName.bind(this);\n\t\tthis.nodeInputChanged = this.nodeInputChanged.bind(this);\n\t\tthis.componentDidUpdate = this.componentDidUpdate.bind(this);\n\t\tthis.state = {\n\t\t\tvalue: this.getOperationName(this.props.node.input[3].value)\n\t\t};\n\n\t\tthis.componentDidMount = this.componentDidMount.bind(this);\n\t\tthis.componentWillUnmount = this.componentWillUnmount.bind(this);\n\t}\n\n\t_createClass(ImageSet, [{\n\t\tkey: \"componentDidUpdate\",\n\t\tvalue: function componentDidUpdate() {\n\t\t\tthis.refs.slider._handleResize();\n\t\t}\n\t}, {\n\t\tkey: \"nodeInputChanged\",\n\t\tvalue: function nodeInputChanged(err, data) {\n\t\t\tvar varname = this.node.varname;\n\t\t\tif (varname !== data.varname) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tvalue: this.getOperationName(data.input[3].value)\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"componentDidMount\",\n\t\tvalue: function componentDidMount() {\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.on(NODE_INPUT_CHANGED, this.nodeInputChanged);\n\t\t}\n\t}, {\n\t\tkey: \"componentWillUnmount\",\n\t\tvalue: function componentWillUnmount() {\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.off(NODE_INPUT_CHANGED, this.nodeInputChanged);\n\t\t}\n\t}, {\n\t\tkey: \"onChange\",\n\t\tvalue: function onChange(e) {\n\t\t\tvar option = e.target.options[e.target.selectedIndex];\n\t\t\tif (this.filterNameToID.hasOwnProperty(option.value)) {\n\t\t\t\tvar id = this.filterNameToID[option.value];\n\t\t\t\tthis.props.action.changeNodeInput({\n\t\t\t\t\tvarname: this.props.node.varname,\n\t\t\t\t\tinput: {\n\t\t\t\t\t\t\"operation\": id\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"options\",\n\t\tvalue: function options() {\n\t\t\tvar _this = this;\n\n\t\t\tvar options = Object.keys(this.filterNameToID).map(function (name, index) {\n\t\t\t\tvar id = _this.filterNameToID[name];\n\t\t\t\treturn _react2[\"default\"].createElement(\n\t\t\t\t\t\"option\",\n\t\t\t\t\t{ key: id + \"_\" + String(index) },\n\t\t\t\t\tname\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn options;\n\t\t}\n\t}, {\n\t\tkey: \"getOperationName\",\n\t\tvalue: function getOperationName(id) {\n\t\t\tfor (var i in this.filterNameToID) {\n\t\t\t\tif (this.filterNameToID[i] === id) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn \"\";\n\t\t}\n\t}, {\n\t\tkey: \"onSliderChange\",\n\t\tvalue: function onSliderChange(val) {\n\t\t\tthis.props.action.changeNodeInput({\n\t\t\t\tvarname: this.props.node.varname,\n\t\t\t\tinput: {\n\t\t\t\t\t\"factor\": Number(val)\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"render\",\n\t\tvalue: function render() {\n\t\t\treturn _react2[\"default\"].createElement(\n\t\t\t\t\"div\",\n\t\t\t\t{ className: 'filterimage', style: { margin: '4', minWidth: \"150px\", minHeight: \"120px\", height: '100%', padding: '2' } },\n\t\t\t\t_react2[\"default\"].createElement(\n\t\t\t\t\t\"div\",\n\t\t\t\t\tnull,\n\t\t\t\t\t\"filter type\"\n\t\t\t\t),\n\t\t\t\t_react2[\"default\"].createElement(\n\t\t\t\t\t\"select\",\n\t\t\t\t\t{ value: this.state.value, defaultValue: this.getOperationName(this.props.node.input[3].value), style: { width: \"120px\", height: \"25px\" }, onChange: this.onChange.bind(this) },\n\t\t\t\t\tthis.options.bind(this)()\n\t\t\t\t),\n\t\t\t\t_react2[\"default\"].createElement(\n\t\t\t\t\t\"div\",\n\t\t\t\t\t{ style: { height: \"20\" } },\n\t\t\t\t\t\"factor\"\n\t\t\t\t),\n\t\t\t\t_react2[\"default\"].createElement(\n\t\t\t\t\t_reactSlider2[\"default\"],\n\t\t\t\t\t{\n\t\t\t\t\t\tref: \"slider\",\n\t\t\t\t\t\tvalue: [Number(this.props.node.input[2].value)],\n\t\t\t\t\t\tmin: 0.0,\n\t\t\t\t\t\tmax: 1.0,\n\t\t\t\t\t\tstep: 0.1,\n\t\t\t\t\t\tonChange: this.onSliderChange.bind(this),\n\t\t\t\t\t\twithBars: true\n\t\t\t\t\t},\n\t\t\t\t\t_react2[\"default\"].createElement(\"div\", { className: \"thum\" })\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}]);\n\n\treturn ImageSet;\n})(_react2[\"default\"].Component);\n\nmodule.exports = ImageSet;",
      "varname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4",
      "label": "",
      "select": false,
      "node": {
        "close": false,
        "pos": [
          2530,
          2061.6153846153848
        ],
        "zindex": 0
      },
      "panel": {
        "visible": true,
        "size": [
          100,
          100
        ],
        "pos": [
          355.5108925815598,
          563.3851344076373
        ],
        "zindex": -1
      }
    },
    {
      "name": "ImageView",
      "funcname": "ImageView",
      "info": "imageviewをつくるノード",
      "customfuncfile": "imageview.lua",
      "uifile": "imageview.jsx",
      "input": [
        {
          "name": "image",
          "type": "BufferImageData",
          "nodeVarname": "ImageView792b1bf0_0c0b_4c2b_9fc7_e2d6c61dfa38"
        },
        {
          "name": "ipcmode",
          "type": "bool",
          "value": false,
          "hole": false,
          "nodeVarname": "ImageView792b1bf0_0c0b_4c2b_9fc7_e2d6c61dfa38"
        }
      ],
      "output": [],
      "customfunc": "ImageView = {}\nsetmetatable(ImageView, {__index = HiveBaseModule})\n\nImageView.new = function (varname)\n    local this = HiveBaseModule.new(varname)\n    setmetatable(this, {__index=ImageView})\n    return this\nend\n\nfunction ImageView:Do()\n    -- nothing to do\n    self:UpdateValue()\n    print(\"selfvarname\", self.varname)\n    \n    local v = self.value\n    if (v.image == nil) then\n        return false\n    end\n    local mode = 'png'\n    -- image save\n    local imageBuffer\n    local imageBufferSize\n    if v.ipcmode then\n        mode = 'raw'\n        -- image save\n        imageBuffer = v.image:GetBuffer()\n        imageBufferSize = v.image:GetSize()\n    else\n        -- image save\n        imageBuffer = HIVE_ImageSaver:SaveMemory(5, v.image) --png\n        imageBufferSize = HIVE_ImageSaver:MemorySize()\n    end\n    \n    -- create metabinary\n    --local w = v.screensize[1]\n    --local h = v.screensize[2]\n    local w = v.image:GetWidth()\n    local h = v.image:GetHeight()\n    print('rendersize=('.. w ..\",\".. h ..\")\", 'cancel=', tostring(HIVE_isRenderCanceled))\n    \n    if targetClientId == nil then\n        return false\n    end\n    local json = [[{\n            \"JSONRPC\" : \"2.0\",\n            \"method\" : \"renderedImage\",            \n            \"to\" : ]] .. targetClientId ..[[,\n            \"param\" : {\n                \"type\" : \"]] .. mode .. [[\",\n                \"width\" : \"]] .. w .. [[\",\n                \"height\" : \"]] .. h .. [[\",\n                \"canceled\": ]] .. tostring(HIVE_isRenderCanceled) .. [[,\n                \"varname\": \"]] .. self.varname .. [[\"\n            },\n            \"id\":0\n    }]]\n    HIVE_metabin:Create(json, imageBuffer, imageBufferSize)\n    --print('JSON=', json, 'size=', imageBufferSize)\n    -- send\n    print('ipcmode', v.ipcmode)        \n    if v.ipcmode then       \n        if self.network_ipc == nil then\n            local ipcAddress = 'ipc:///tmp/HIVE_IPC_' .. self.varname\n            print('IPC open=', ipcAddress);\n\t        self.network_ipc = require(\"Network\").Connection()\n\t        local ipcr = self.network_ipc:Connect(ipcAddress)\n\t        print('IPC ret=', ipcr)\n        end\n        print('IPC->', self.network_ipc)\n        self.network_ipc:SendBinary(HIVE_metabin:BinaryBuffer(), HIVE_metabin:BinaryBufferSize())\n        print('IPC SEND!!!!!!!!!!!')\t\t\t   \n\n    else\n        network:SendBinary(HIVE_metabin:BinaryBuffer(), HIVE_metabin:BinaryBufferSize())\n        print('WEBSOCKET SEND!!!!!!!!!!!')\t\t\t   \n\n    end\n    return true\nend\n",
      "uiFunc": "'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar minWidth = 256;\nvar minHeight = 100;\nvar footerHeight = 50;\n\nvar ImageView = (function (_React$Component) {\n\t_inherits(ImageView, _React$Component);\n\n\tfunction ImageView(props) {\n\t\t_classCallCheck(this, ImageView);\n\n\t\t_get(Object.getPrototypeOf(ImageView.prototype), 'constructor', this).call(this, props);\n\t\tthis.node = props.node;\n\t\tthis.action = props.action;\n\t\tthis.store = props.store;\n\n\t\tthis.varname = this.node.varname;\n\n\t\tthis.state = {\n\t\t\twidth: this.canvasSize()[0],\n\t\t\theight: this.canvasSize()[1]\n\t\t};\n\n\t\tthis.componentDidUpdate = this.componentDidUpdate.bind(this);\n\t\tthis.imageRecieved = this.imageRecieved.bind(this);\n\t\tthis.imageRecieveWrap = this.imageRecieveWrap.bind(this);\n\t\tthis.onPanelSizeChanged = this.onPanelSizeChanged.bind(this);\n\t\tthis.getInputValue = this.getInputValue.bind(this);\n\t\tthis.imageSize = null;\n\t}\n\n\t_createClass(ImageView, [{\n\t\tkey: 'imageUpdate',\n\t\tvalue: function imageUpdate(param) {\n\t\t\tvar w = param.width;\n\t\t\tvar h = param.height;\n\t\t\tvar varname = this.node.varname;\n\t\t}\n\t}, {\n\t\tkey: 'imageRecieved',\n\t\tvalue: function imageRecieved(err, param, data) {\n\t\t\tvar buffer;\n\t\t\tvar varname = this.node.varname;\n\t\t\tif (param.varname !== varname) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (param.type === 'jpg') {\n\t\t\t\tbuffer = new Blob([data]);\n\t\t\t} else if (param.type === 'png') {\n\t\t\t\tbuffer = new Blob([data]);\n\t\t\t} else {\n\t\t\t\tbuffer = data;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\timage: buffer\n\t\t\t});\n\t\t\tthis.imageSize = [parseFloat(param.width), parseFloat(param.height)];\n\n\t\t\tthis.imageUpdate(param);\n\t\t}\n\t}, {\n\t\tkey: 'readyForIPCImageTransfer',\n\t\tvalue: function readyForIPCImageTransfer() {\n\t\t\tvar _this = this;\n\n\t\t\t// Electron only\n\t\t\tif (this.sc === undefined && window && window.process && window.process.type) {\n\t\t\t\tvar nano = process.mainModule.require('nanomsg');\n\t\t\t\tvar buffercopy = process.mainModule.require('buffercopy');\n\t\t\t\tvar sc = nano.socket('pair');\n\t\t\t\tthis.sc = sc;\n\t\t\t\tvar meta = process.mainModule.require(process.mainModule.require(\"path\").resolve('./lib/metabinary')); // path from index.html\n\t\t\t\tthis.meta = meta;\n\t\t\t\tvar ipcAddress = 'ipc:///tmp/HIVE_IPC_' + this.varname;\n\t\t\t\tvar ret = sc.bind(ipcAddress);\n\t\t\t\tconsole.log('IPC bind = ', ret, ipcAddress);\n\n\t\t\t\tthis.sc.on('data', function (data) {\n\t\t\t\t\tif (!_this.meta.loadMetaBinary(data, function (meta, data) {\n\t\t\t\t\t\tvar w,\n\t\t\t\t\t\t    h,\n\t\t\t\t\t\t    param = meta.param;\n\n\t\t\t\t\t\tconsole.log(\"param\", param);\n\t\t\t\t\t\tif (param.type === 'jpg') {\n\t\t\t\t\t\t\t// resultElement is img.\n\t\t\t\t\t\t\tvar resultElement = document.getElementById(_this.getCanvasName('img'));\n\t\t\t\t\t\t\tresultElement.src = URL.createObjectURL(new Blob([data], { type: \"image/jpeg\" }));\n\t\t\t\t\t\t} else if (param.type === 'png') {\n\t\t\t\t\t\t\t// resultElement is img.\n\t\t\t\t\t\t\tvar resultElement = document.getElementById(_this.getCanvasName('img'));\n\t\t\t\t\t\t\tresultElement.src = URL.createObjectURL(new Blob([data], { type: \"image/png\" }));\n\t\t\t\t\t\t} else if (param.type === 'raw') {\n\t\t\t\t\t\t\t// resultElement is canvas.\n\t\t\t\t\t\t\tvar resultElement = document.getElementById(_this.getCanvasName('canvas'));\n\t\t\t\t\t\t\tif (resultElement) {\n\t\t\t\t\t\t\t\t// why undefined, sometime??\n\t\t\t\t\t\t\t\tresultElement.setAttribute('width', param.width), resultElement.setAttribute('height', param.height);\n\t\t\t\t\t\t\t\tvar context = resultElement.getContext('2d');\n\t\t\t\t\t\t\t\tvar imageData = context.createImageData(param.width, param.height);\n\t\t\t\t\t\t\t\tbuffercopy.buffercopy(data, imageData.data);\n\t\t\t\t\t\t\t\t_this.setState({\n\t\t\t\t\t\t\t\t\timageData: imageData\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t_this.imageSize = [param.width, param.height];\n\t\t\t\t\t\t\t\tcontext.putImageData(imageData, 0, 0);\n\n\t\t\t\t\t\t\t\t_this.imageUpdate(param);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})) {\n\t\t\t\t\t\tconsole.error('Not metabin foramt');\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'getCanvasName',\n\t\tvalue: function getCanvasName(prefix) {\n\t\t\treturn prefix + '-' + this.varname;\n\t\t}\n\t}, {\n\t\tkey: 'getInputValue',\n\t\tvalue: function getInputValue(key) {\n\t\t\tfor (var i = 0; i < this.node.input.length; i = i + 1) {\n\t\t\t\tif (this.node.input[i].name === key) {\n\t\t\t\t\treturn this.node.input[i].value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'hasIPCAddress',\n\t\tvalue: function hasIPCAddress() {\n\t\t\treturn this.getInputValue('ipcmode');\n\t\t}\n\t}, {\n\t\tkey: 'imageRecieveWrap',\n\t\tvalue: function imageRecieveWrap(err, data) {\n\t\t\tif (data.varname !== this.node.varname) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasIPCAddress()) {\n\t\t\t\tthis.readyForIPCImageTransfer();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'closeForIPCImageTransfer',\n\t\tvalue: function closeForIPCImageTransfer() {\n\t\t\tif (this.sc === undefined) {} else {\n\t\t\t\tthis.sc.close();\n\t\t\t\tthis.sc = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tvar Store_IMAGE_RECIEVED = \"image_revieved\";\n\t\t\tthis.store.on(Store_IMAGE_RECIEVED, this.imageRecieved);\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.on(NODE_INPUT_CHANGED, this.imageRecieveWrap);\n\t\t\tthis.store.on(\"panel_size_changed\", this.onPanelSizeChanged);\n\t\t}\n\t}, {\n\t\tkey: 'componentWillUnmount',\n\t\tvalue: function componentWillUnmount() {\n\t\t\tvar Store_IMAGE_RECIEVED = \"image_revieved\";\n\t\t\tthis.store.off(Store_IMAGE_RECIEVED, this.imageRecieved);\n\t\t\tvar NODE_INPUT_CHANGED = \"node_input_changed\";\n\t\t\tthis.store.off(NODE_INPUT_CHANGED, this.imageRecieveWrap);\n\t\t\tthis.store.off(\"panel_size_changed\", this.onPanelSizeChanged);\n\t\t\tthis.closeForIPCImageTransfer();\n\t\t}\n\t}, {\n\t\tkey: 'onPanelSizeChanged',\n\t\tvalue: function onPanelSizeChanged(err, data) {\n\t\t\tif (data.varname !== this.node.varname) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.props.node.panel.visible) {\n\t\t\t\tvar width = Math.max(this.props.node.panel.size[0], minWidth);\n\t\t\t\tvar height = Math.max(this.props.node.panel.size[1] - footerHeight, minHeight);\n\t\t\t\tif (Number(this.state.width) !== width || Number(this.state.height) !== height) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\twidth: width,\n\t\t\t\t\t\theight: height\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentDidUpdate',\n\t\tvalue: function componentDidUpdate() {\n\t\t\t// キャンバスの更新.\n\t\t\tif (this.state && this.state.image) {\n\t\t\t\tif (!this.hasIPCAddress()) {\n\t\t\t\t\tvar imgElem = document.getElementById(this.getCanvasName('img'));\n\t\t\t\t\timgElem.src = URL.createObjectURL(this.state.image, { type: \"image/jpeg\" });\n\t\t\t\t} else {\n\t\t\t\t\tif (this.imageSize) {\n\t\t\t\t\t\tvar canvas = document.getElementById(this.getCanvasName('canvas'));\n\t\t\t\t\t\tcanvas.setAttribute('width', this.imageSize[0]);\n\t\t\t\t\t\tcanvas.setAttribute('height', this.imageSize[1]);\n\t\t\t\t\t\tvar context = canvas.getContext('2d');\n\t\t\t\t\t\tcontext.putImageData(this.state.imageData, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'canvasSize',\n\t\tvalue: function canvasSize() {\n\t\t\treturn [Math.max(this.props.node.panel.size[0], minWidth), Math.max(this.props.node.panel.size[1], minHeight)];\n\t\t}\n\t}, {\n\t\tkey: 'aspectCanvasSize',\n\t\tvalue: function aspectCanvasSize() {\n\t\t\tif (this.imageSize) {\n\t\t\t\tvar aspect = this.imageSize[0] / this.imageSize[1];\n\t\t\t\tvar w = Math.max(this.props.node.panel.size[0], minWidth);\n\t\t\t\treturn [w, w / aspect];\n\t\t\t}\n\t\t\treturn [Math.max(this.props.node.panel.size[0], minWidth), Math.max(this.props.node.panel.size[1], minHeight)];\n\t\t}\n\t}, {\n\t\tkey: 'aspectImageSize',\n\t\tvalue: function aspectImageSize() {\n\t\t\tif (this.imageSize) {\n\t\t\t\tvar aspect = this.imageSize[0] / this.imageSize[1];\n\t\t\t\tvar w = Math.max(this.state.width, minWidth);\n\t\t\t\treturn [w, w / aspect];\n\t\t\t}\n\t\t\treturn [Math.max(this.state.width, minWidth), Math.max(this.state.height, minHeight)];\n\t\t}\n\t}, {\n\t\tkey: 'styles',\n\t\tvalue: function styles() {\n\t\t\treturn {\n\t\t\t\tbounds: {\n\t\t\t\t\tminWidth: String(minWidth) + \"px\",\n\t\t\t\t\tminHeight: String(minHeight) + \"px\"\n\t\t\t\t},\n\t\t\t\tcanvas: {\n\t\t\t\t\tpostion: \"relative\",\n\t\t\t\t\tleft: \"0px\",\n\t\t\t\t\ttop: \"0px\",\n\t\t\t\t\twidth: String(this.aspectCanvasSize.bind(this)()[0]) + \"px\",\n\t\t\t\t\theight: String(this.aspectCanvasSize.bind(this)()[1]) + \"px\",\n\t\t\t\t\ttransform: \"scale(1.0,-1.0)\",\n\t\t\t\t\tdisplay: this.hasIPCAddress() ? \"block\" : \"none\"\n\t\t\t\t},\n\t\t\t\timage: {\n\t\t\t\t\tpostion: \"relative\",\n\t\t\t\t\tleft: \"0px\",\n\t\t\t\t\ttop: \"0px\",\n\t\t\t\t\twidth: String(this.aspectImageSize.bind(this)()[0]) + \"px\",\n\t\t\t\t\theight: String(this.aspectImageSize.bind(this)()[1]) + \"px\",\n\t\t\t\t\tdisplay: this.hasIPCAddress() ? \"none\" : \"block\"\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar styles = this.styles();\n\t\t\treturn _react2['default'].createElement(\n\t\t\t\t'div',\n\t\t\t\t{ style: { minWidth: \"250px\", height: '250' } },\n\t\t\t\t_react2['default'].createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ ref: 'canvas_wrap' },\n\t\t\t\t\t_react2['default'].createElement('canvas', { id: this.getCanvasName('canvas'), style: styles.canvas,\n\t\t\t\t\t\twidth: this.canvasSize.bind(this)()[0],\n\t\t\t\t\t\theight: this.canvasSize.bind(this)()[1] })\n\t\t\t\t),\n\t\t\t\t_react2['default'].createElement('img', { id: this.getCanvasName('img'), style: styles.image, src: '' })\n\t\t\t);\n\t\t}\n\t}]);\n\n\treturn ImageView;\n})(_react2['default'].Component);\n\nmodule.exports = ImageView;",
      "varname": "ImageView792b1bf0_0c0b_4c2b_9fc7_e2d6c61dfa38",
      "label": "",
      "select": false,
      "node": {
        "close": false,
        "pos": [
          2863.709401709402,
          2058.5470085470088
        ],
        "zindex": 0
      },
      "panel": {
        "visible": true,
        "size": [
          100,
          100
        ],
        "pos": [
          563.888278059926,
          454.75674669165556
        ],
        "zindex": 6
      }
    }
  ],
  "plugs": [
    {
      "output": {
        "nodeVarname": "Timebb39a741_6787_4bd0_80b2_b19b4f7c40f8",
        "name": "time"
      },
      "input": {
        "nodeVarname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927",
        "name": "input[0]"
      }
    },
    {
      "output": {
        "nodeVarname": "Timebb39a741_6787_4bd0_80b2_b19b4f7c40f8",
        "name": "time"
      },
      "input": {
        "nodeVarname": "Math9779fa29_e816_48a1_8196_007116dad6d2",
        "name": "value0"
      }
    },
    {
      "output": {
        "nodeVarname": "StringFormat2836b9a7_2f14_48a8_a03c_df55d1e047a7",
        "name": "String"
      },
      "input": {
        "nodeVarname": "ImageGet02af5dd7_04bb_4bc3_916a_03136c04b221",
        "name": "id"
      }
    },
    {
      "output": {
        "nodeVarname": "VolumeObject72ffef7a_daeb_46d2_86ec_8cc2b0e705ad",
        "name": "model"
      },
      "input": {
        "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997",
        "name": "RenderObject[0]"
      }
    },
    {
      "output": {
        "nodeVarname": "Timebb39a741_6787_4bd0_80b2_b19b4f7c40f8",
        "name": "timestring"
      },
      "input": {
        "nodeVarname": "ImageSetfb431896_c992_4b5a_b510_5656e6894f1a",
        "name": "id"
      }
    },
    {
      "output": {
        "nodeVarname": "ImageGet02af5dd7_04bb_4bc3_916a_03136c04b221",
        "name": "image"
      },
      "input": {
        "nodeVarname": "ImageViewde2318f6_5fe8_458e_8a26_4bca72fc0c2c",
        "name": "image"
      }
    },
    {
      "output": {
        "nodeVarname": "ImageGet02af5dd7_04bb_4bc3_916a_03136c04b221",
        "name": "image"
      },
      "input": {
        "nodeVarname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4",
        "name": "image1"
      }
    },
    {
      "output": {
        "nodeVarname": "RenderView3bfd6360_2480_4cd0_94a5_207c7a7f8997",
        "name": "Image"
      },
      "input": {
        "nodeVarname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4",
        "name": "image0"
      }
    },
    {
      "output": {
        "nodeVarname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4",
        "name": "result"
      },
      "input": {
        "nodeVarname": "ImageSetfb431896_c992_4b5a_b510_5656e6894f1a",
        "name": "image"
      }
    },
    {
      "output": {
        "nodeVarname": "FilterImage36294c5d_4764_49a4_98be_126d3890a1a4",
        "name": "result"
      },
      "input": {
        "nodeVarname": "ImageView792b1bf0_0c0b_4c2b_9fc7_e2d6c61dfa38",
        "name": "image"
      }
    }
  ],
  "input": [],
  "output": [],
  "nodePath": [],
  "timeline": {
    "frame": 0,
    "data": {
      "contents": [
        {
          "name": "Time(t-1)",
          "nodeVarname": "Math9779fa29_e816_48a1_8196_007116dad6d2",
          "color": "rgb(32, 96, 196)",
          "propColor": "rgb(19, 154, 165)",
          "props": [
            {
              "name": "value0",
              "nodeVarname": "Math9779fa29_e816_48a1_8196_007116dad6d2",
              "data": {}
            }
          ]
        },
        {
          "name": "SphVolume",
          "nodeVarname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927",
          "color": "rgb(32, 96, 196)",
          "propColor": "rgb(19, 154, 165)",
          "props": [
            {
              "name": "input[0]",
              "nodeVarname": "StringFormate43908d5_d450_4e52_ab05_f7f44f150927",
              "data": {}
            }
          ]
        }
      ]
    }
  }
}